package org.spa.model.discount;
// Generated 2016-5-12 11:49:54 by Hibernate Tools 4.3.1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Optional;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.spa.model.company.Company;
import org.spa.model.loyalty.LoyaltyLevel;
import org.spa.model.product.Category;
import org.spa.model.product.Product;
import org.spa.model.shop.Shop;
import org.spa.model.user.UserGroup;

/**
 * DiscountRule generated by hbm2java
 */
@Entity
@Table(name = "DISCOUNT_RULE", catalog = "loccitane")
public class DiscountRule implements java.io.Serializable {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Long id;
    private String code;
    private Company company;
    private DiscountTemplate discountTemplate;
    private Date startTime;
    private Date endTime;
    private String description;
    private boolean isActive;
    private Date created;
    private String createdBy;
    private Date lastUpdated;
    private String lastUpdatedBy;
    private Set<DiscountAttribute> discountAttributes = new HashSet<DiscountAttribute>(0);
    private Set<Shop> shops = new HashSet<Shop>(0);
    private Set<Product> products = new HashSet<Product>(0);
    private Set<Category> categories = new HashSet<Category>(0);
    private Set<UserGroup> userGroups = new HashSet<UserGroup>(0);
    private Set<LoyaltyLevel> loyaltyGroups = new HashSet<LoyaltyLevel>(0);
    
    public DiscountRule() {
    }

    public DiscountRule(Company company, DiscountTemplate discountTemplate, Shop shop, Date startTime, Date endTime, boolean isActive, Date created, String createdBy, Date lastUpdated, String lastUpdatedBy) {
        this.company = company;
        this.discountTemplate = discountTemplate;
        this.startTime = startTime;
        this.endTime = endTime;
        this.isActive = isActive;
        this.created = created;
        this.createdBy = createdBy;
        this.lastUpdated = lastUpdated;
        this.lastUpdatedBy = lastUpdatedBy;
    }

    public DiscountRule(Company company, DiscountTemplate discountTemplate, Shop shop, Date startTime, Date endTime, String description, boolean isActive, Date created, String createdBy, Date lastUpdated, String lastUpdatedBy, Set<DiscountAttribute> discountAttributes, Set<Product> products, Set<Category> categories,
                        Set<UserGroup> userGroups,Set<LoyaltyLevel> loyaltyGroups) {
        this.company = company;
        this.discountTemplate = discountTemplate;
        this.startTime = startTime;
        this.endTime = endTime;
        this.description = description;
        this.isActive = isActive;
        this.created = created;
        this.createdBy = createdBy;
        this.lastUpdated = lastUpdated;
        this.lastUpdatedBy = lastUpdatedBy;
        this.discountAttributes = discountAttributes;
        this.products = products;
        this.categories = categories;
        this.userGroups = userGroups;
        this.loyaltyGroups=loyaltyGroups;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "id", unique = true, nullable = false)
    public Long getId() {
        return this.id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @Column(name = "code", nullable = true, length = 255)
    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "company_id", nullable = false)
    public Company getCompany() {
        return this.company;
    }

    public void setCompany(Company company) {
        this.company = company;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "template_id", nullable = false)
    public DiscountTemplate getDiscountTemplate() {
        return this.discountTemplate;
    }

    public void setDiscountTemplate(DiscountTemplate discountTemplate) {
        this.discountTemplate = discountTemplate;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "start_time", nullable = false, length = 19)
    public Date getStartTime() {
        return this.startTime;
    }

    public void setStartTime(Date startTime) {
        this.startTime = startTime;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "end_time", nullable = false, length = 19)
    public Date getEndTime() {
        return this.endTime;
    }

    public void setEndTime(Date endTime) {
        this.endTime = endTime;
    }

    @Column(name = "description")
    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Column(name = "is_active", nullable = false)
    public boolean isIsActive() {
        return this.isActive;
    }

    public void setIsActive(boolean isActive) {
        this.isActive = isActive;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "created", nullable = false, length = 19)
    public Date getCreated() {
        return this.created;
    }

    public void setCreated(Date created) {
        this.created = created;
    }

    @Column(name = "created_by", nullable = false, length = 100)
    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "last_updated", nullable = false, length = 19)
    public Date getLastUpdated() {
        return this.lastUpdated;
    }

    public void setLastUpdated(Date lastUpdated) {
        this.lastUpdated = lastUpdated;
    }

    @Column(name = "last_updated_by", nullable = false, length = 100)
    public String getLastUpdatedBy() {
        return this.lastUpdatedBy;
    }

    public void setLastUpdatedBy(String lastUpdatedBy) {
        this.lastUpdatedBy = lastUpdatedBy;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "discountRule", cascade = CascadeType.ALL, orphanRemoval = true)
    @OrderBy(value = "id asc")
    public Set<DiscountAttribute> getDiscountAttributes() {
        return this.discountAttributes;
    }

    public void setDiscountAttributes(Set<DiscountAttribute> discountAttributes) {
        this.discountAttributes = discountAttributes;
    }

    @ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    @JoinTable(name = "discount_rule_shop", catalog = "loccitane", joinColumns = { @JoinColumn(name = "discount_rule_id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "shop_id", nullable = false, updatable = false) })
    public Set<Shop> getShops() {
        return this.shops;
    }

    public void setShops(Set<Shop> shops) {
        this.shops = shops;
    }

    @ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    @JoinTable(name = "DISCOUNT_RULE_PRODUCT", catalog = "loccitane", joinColumns = { @JoinColumn(name = "discount_rule_id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "product_id", nullable = false, updatable = false) })
    public Set<Product> getProducts() {
        return this.products;
    }

    public void setProducts(Set<Product> products) {
        this.products = products;
    }

    @ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    @JoinTable(name = "DISCOUNT_RULE_CATEGORY", catalog = "loccitane", joinColumns = { @JoinColumn(name = "discount_rule_id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "category_id", nullable = false, updatable = false) })
    public Set<Category> getCategories() {
        return this.categories;
    }

    public void setCategories(Set<Category> categories) {
        this.categories = categories;
    }

    @ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    @JoinTable(name = "DISCOUNT_RULE_USER_GROUP", catalog = "loccitane", joinColumns = { @JoinColumn(name = "discount_rule_id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "user_group_id", nullable = false, updatable = false) })
    public Set<UserGroup> getUserGroups() {
        return this.userGroups;
    }

    public void setUserGroups(Set<UserGroup> userGroups) {
        this.userGroups = userGroups;
    }

    @ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    @JoinTable(name = "DISCOUNT_RULE_LOYALTY_GROUP", catalog = "loccitane", joinColumns = { @JoinColumn(name = "discount_rule_id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "loyalty_level_id", nullable = false, updatable = false) })
    public Set<LoyaltyLevel> getLoyaltyGroups() {
		return loyaltyGroups;
	}
    public void setLoyaltyGroups(Set<LoyaltyLevel> loyaltyGroups) {
		this.loyaltyGroups = loyaltyGroups;
	}
    
    @Transient
    public String getDiscountAttribute(String attributeName) {
        if (discountAttributes == null || discountAttributes.size() == 0) {
            return "";
        }
        Optional<DiscountAttribute> attributeOptional = discountAttributes.stream().filter(i -> i.getDiscountAttributeKey().getReference().equals(attributeName)).findFirst();
        if (attributeOptional.isPresent()) {
            return attributeOptional.get().getValue();
        }
        return "";
    }
}
