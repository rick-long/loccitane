package org.spa.model.inventory;
// Generated 2016-5-5 12:03:43 by Hibernate Tools 4.3.1

import org.spa.model.company.Company;
import org.spa.model.order.PurchaseItem;
import org.spa.model.order.PurchaseOrder;
import org.spa.model.shop.Shop;

import javax.persistence.*;
import java.text.SimpleDateFormat;
import java.util.Date;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * InventoryTransaction generated by hbm2java
 */
@Entity
@Table(name = "INVENTORY_TRANSACTION", catalog = "loccitane")
public class InventoryTransaction implements java.io.Serializable {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Long id;
    private Company company;
    private Inventory inventory;
    private InventoryPurchaseOrderShipmentItem inventoryPurchaseOrderShipmentItem;
    private Shop shop;
    private int qty;
    private String direction;
    private String transactionType;
    private Date entryDate;
    private String remarks;
    private boolean isActive;
    private Date created;
    private String createdBy;
    private Date lastUpdated;
    private String lastUpdatedBy;

    private PurchaseOrder purchaseOrder;
    
    private PurchaseItem purchaseItem;
    
    private String oldId;

    @Column(name = "old_id", length = 45)
    public String getOldId() {
        return this.oldId;
    }

    public void setOldId(String oldId) {
        this.oldId = oldId;
    }

    public InventoryTransaction() {
    }

    public InventoryTransaction(Company company, Inventory inventory, Shop shop, int qty, String direction, String transactionType, Date entryDate, boolean isActive, Date created, String createdBy, Date lastUpdated, String lastUpdatedBy) {
        this.company = company;
        this.inventory = inventory;
        this.shop = shop;
        this.qty = qty;
        this.direction = direction;
        this.transactionType = transactionType;
        this.entryDate = entryDate;
        this.isActive = isActive;
        this.created = created;
        this.createdBy = createdBy;
        this.lastUpdated = lastUpdated;
        this.lastUpdatedBy = lastUpdatedBy;
    }

    public InventoryTransaction(Company company, Inventory inventory, InventoryPurchaseOrderShipmentItem inventoryPurchaseOrderShipmentItem, Shop shop, int qty, String direction, String transactionType, Date entryDate, String remarks, boolean isActive, Date created, String createdBy, Date lastUpdated,
                                String lastUpdatedBy,PurchaseOrder purchaseOrder,PurchaseItem purchaseItem) {
        this.company = company;
        this.inventory = inventory;
        this.inventoryPurchaseOrderShipmentItem = inventoryPurchaseOrderShipmentItem;
        this.shop = shop;
        this.qty = qty;
        this.direction = direction;
        this.transactionType = transactionType;
        this.entryDate = entryDate;
        this.remarks = remarks;
        this.isActive = isActive;
        this.created = created;
        this.createdBy = createdBy;
        this.lastUpdated = lastUpdated;
        this.lastUpdatedBy = lastUpdatedBy;
        this.purchaseOrder=purchaseOrder;
        this.purchaseItem=purchaseItem;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "id", unique = true, nullable = false)
    public Long getId() {
        return this.id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "company_id", nullable = false)
    public Company getCompany() {
        return this.company;
    }

    public void setCompany(Company company) {
        this.company = company;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "inventory_id", nullable = false)
    public Inventory getInventory() {
        return this.inventory;
    }

    public void setInventory(Inventory inventory) {
        this.inventory = inventory;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "inventory_purchase_order_shipment_item_id")
    public InventoryPurchaseOrderShipmentItem getInventoryPurchaseOrderShipmentItem() {
        return this.inventoryPurchaseOrderShipmentItem;
    }

    public void setInventoryPurchaseOrderShipmentItem(InventoryPurchaseOrderShipmentItem inventoryPurchaseOrderShipmentItem) {
        this.inventoryPurchaseOrderShipmentItem = inventoryPurchaseOrderShipmentItem;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "shop_id", nullable = false)
    public Shop getShop() {
        return this.shop;
    }

    public void setShop(Shop shop) {
        this.shop = shop;
    }

    @Column(name = "qty", nullable = false)
    public int getQty() {
        return this.qty;
    }

    public void setQty(int qty) {
        this.qty = qty;
    }

    @Column(name = "direction", nullable = false, length = 50)
    public String getDirection() {
        return this.direction;
    }

    public void setDirection(String direction) {
        this.direction = direction;
    }

    @Column(name = "transaction_type", nullable = false, length = 50)
    public String getTransactionType() {
        return this.transactionType;
    }

    public void setTransactionType(String transactionType) {
        this.transactionType = transactionType;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "entry_date", nullable = false, length = 19)
    public Date getEntryDate() {
        return this.entryDate;
    }

    public void setEntryDate(Date entryDate) {
        this.entryDate = entryDate;
    }

    @Column(name = "remarks")
    public String getRemarks() {
        return this.remarks;
    }

    public void setRemarks(String remarks) {
        this.remarks = remarks;
    }

    @Column(name = "is_active", nullable = false)
    public boolean isIsActive() {
        return this.isActive;
    }

    public void setIsActive(boolean isActive) {
        this.isActive = isActive;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "created", nullable = false, length = 19)
    public Date getCreated() {
        return this.created;
    }

    public void setCreated(Date created) {
        this.created = created;
    }

    @Column(name = "created_by", nullable = false, length = 100)
    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "last_updated", nullable = false, length = 19)
    public Date getLastUpdated() {
        return this.lastUpdated;
    }

    public void setLastUpdated(Date lastUpdated) {
        this.lastUpdated = lastUpdated;
    }

    @Column(name = "last_updated_by", nullable = false, length = 100)
    public String getLastUpdatedBy() {
        return this.lastUpdatedBy;
    }

    public void setLastUpdatedBy(String lastUpdatedBy) {
        this.lastUpdatedBy = lastUpdatedBy;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "purchase_item_id")
    public PurchaseItem getPurchaseItem() {
		return purchaseItem;
	}
    
    public void setPurchaseItem(PurchaseItem purchaseItem) {
		this.purchaseItem = purchaseItem;
	}
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "purchase_order_id")
    public PurchaseOrder getPurchaseOrder() {
		return purchaseOrder;
	}
    public void setPurchaseOrder(PurchaseOrder purchaseOrder) {
		this.purchaseOrder = purchaseOrder;
	}
    @Transient
    public String getStringEntryDate(){
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        String entryDate = format.format(this.entryDate);
        return entryDate;
    }

}
