package org.spa.model.inventory;
// Generated 2016-3-31 15:50:45 by Hibernate Tools 4.3.1.Final

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.spa.model.company.Company;
import org.spa.model.product.Supplier;
import org.spa.model.shop.Shop;

/**
 * InventoryPurchaseOrder generated by hbm2java
 */
@Entity
@Table(name = "INVENTORY_PURCHASE_ORDER", catalog = "loccitane")
public class InventoryPurchaseOrder implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Long id;
	private Company company;
	private Supplier supplier;
	private String reference;
	private Date date;
	private String deliveryNoteNumber;
	private Date expectedDeliveryDate;
	private BigDecimal totalAmount;
	private String status;
	private String remarks;
	private boolean isActive;
	private Date created;
	private String createdBy;
	private Date lastUpdated;
	private String lastUpdatedBy;
    private Set<InventoryPurchaseOrderShipment> inventoryPurchaseOrderShipments = new HashSet<InventoryPurchaseOrderShipment>(0);
    private Set<Shop> shops = new HashSet<Shop>(0);
    private Set<InventoryPurchaseItem> inventoryPurchaseItems = new HashSet<InventoryPurchaseItem>(0);

	public InventoryPurchaseOrder() {
	}

    public InventoryPurchaseOrder(Supplier supplier, String reference, boolean isActive) {
        this.supplier = supplier;
        this.reference = reference;
        this.isActive = isActive;
    }

    public InventoryPurchaseOrder(Company company, Supplier supplier, String reference, Date date, String deliveryNoteNumber, Date expectedDeliveryDate, BigDecimal totalAmount, String status, String remarks, boolean isActive, Date created, String createdBy, Date lastUpdated, String lastUpdatedBy,
                                  Set<InventoryPurchaseOrderShipment> inventoryPurchaseOrderShipments, Set<Shop> shops, Set<InventoryPurchaseItem> inventoryPurchaseItems) {
        this.company = company;
        this.supplier = supplier;
        this.reference = reference;
        this.date = date;
        this.deliveryNoteNumber = deliveryNoteNumber;
        this.expectedDeliveryDate = expectedDeliveryDate;
        this.totalAmount = totalAmount;
        this.status = status;
        this.remarks = remarks;
        this.isActive = isActive;
        this.created = created;
        this.createdBy = createdBy;
        this.lastUpdated = lastUpdated;
        this.lastUpdatedBy = lastUpdatedBy;
        this.inventoryPurchaseOrderShipments = inventoryPurchaseOrderShipments;
        this.shops = shops;
        this.inventoryPurchaseItems = inventoryPurchaseItems;
    }

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "company_id")
	public Company getCompany() {
		return this.company;
	}

	public void setCompany(Company company) {
		this.company = company;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "supplier_id", nullable = false)
	public Supplier getSupplier() {
		return this.supplier;
	}

	public void setSupplier(Supplier supplier) {
		this.supplier = supplier;
	}

	@Column(name = "reference", nullable = false, length = 50)
	public String getReference() {
		return this.reference;
	}

	public void setReference(String reference) {
		this.reference = reference;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "date", length = 19)
	public Date getDate() {
		return this.date;
	}

	public void setDate(Date date) {
		this.date = date;
	}

	@Column(name = "delivery_note_number", length = 50)
	public String getDeliveryNoteNumber() {
		return this.deliveryNoteNumber;
	}

	public void setDeliveryNoteNumber(String deliveryNoteNumber) {
		this.deliveryNoteNumber = deliveryNoteNumber;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "expected_delivery_date", length = 19)
	public Date getExpectedDeliveryDate() {
		return this.expectedDeliveryDate;
	}

	public void setExpectedDeliveryDate(Date expectedDeliveryDate) {
		this.expectedDeliveryDate = expectedDeliveryDate;
	}

	@Column(name = "total_amount", precision = 18)
	public BigDecimal getTotalAmount() {
		return this.totalAmount;
	}

	public void setTotalAmount(BigDecimal totalAmount) {
		this.totalAmount = totalAmount;
	}

	@Column(name = "status", length = 45)
	public String getStatus() {
		return this.status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	@Column(name = "remarks")
	public String getRemarks() {
		return this.remarks;
	}

	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}

	@Column(name = "is_active", nullable = false)
	public boolean isIsActive() {
		return this.isActive;
	}

	public void setIsActive(boolean isActive) {
		this.isActive = isActive;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", length = 19)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Column(name = "created_by", length = 100)
	public String getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_updated", length = 19)
	public Date getLastUpdated() {
		return this.lastUpdated;
	}

	public void setLastUpdated(Date lastUpdated) {
		this.lastUpdated = lastUpdated;
	}

	@Column(name = "last_updated_by", length = 100)
	public String getLastUpdatedBy() {
		return this.lastUpdatedBy;
	}

	public void setLastUpdatedBy(String lastUpdatedBy) {
		this.lastUpdatedBy = lastUpdatedBy;
	}

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "inventoryPurchaseOrder")
    @OrderBy(value = "deliveryDate DESC")
    public Set<InventoryPurchaseOrderShipment> getInventoryPurchaseOrderShipments() {
        return this.inventoryPurchaseOrderShipments;
    }

    public void setInventoryPurchaseOrderShipments(Set<InventoryPurchaseOrderShipment> inventoryPurchaseOrderShipments) {
        this.inventoryPurchaseOrderShipments = inventoryPurchaseOrderShipments;
    }

    @ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    @OrderBy(value = "name ASC")
    @JoinTable(name = "inventory_purchase_order_shop", catalog = "loccitane", joinColumns = { @JoinColumn(name = "inventory_purchase_order_id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "shop_id", nullable = false, updatable = false) })
    public Set<Shop> getShops() {
        return this.shops;
    }

    public void setShops(Set<Shop> shops) {
        this.shops = shops;
    }

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "inventoryPurchaseOrder", cascade = CascadeType.ALL, orphanRemoval = true)
	@OrderBy(value = "id ASC")
	public Set<InventoryPurchaseItem> getInventoryPurchaseItems() {
		return this.inventoryPurchaseItems;
	}

	public void setInventoryPurchaseItems(Set<InventoryPurchaseItem> inventoryPurchaseItems) {
		this.inventoryPurchaseItems = inventoryPurchaseItems;
	}

    @Transient
    public double getReceivedAmount() {
        if (inventoryPurchaseOrderShipments.size() == 0) {
            return 0D;
        }
        return inventoryPurchaseOrderShipments.stream().flatMap(e -> e.getInventoryPurchaseOrderShipmentItems().stream()).mapToDouble(e -> new BigDecimal(e.getProductOption().getOriginalPrice().toString()).multiply(new BigDecimal(e.getQty())).doubleValue()).sum();
    }
}
