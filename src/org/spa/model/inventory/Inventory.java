package org.spa.model.inventory;
// Generated 2016-3-31 15:50:45 by Hibernate Tools 4.3.1.Final

import org.spa.model.company.Company;
import org.spa.model.product.ProductOption;

import javax.persistence.*;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * Inventory generated by hbm2java
 */
@Entity
@Table(name = "INVENTORY", catalog = "loccitane")
public class Inventory implements java.io.Serializable {

	private static final long serialVersionUID = 1L;
	private Long id;
	private Company company;
	private InventoryPurchaseItem inventoryPurchaseItem;
	private ProductOption productOption;
	private Integer maxStockAlert;
	private Integer minStockAlert;
	private boolean isActive;
	private Date created;
	private String createdBy;
	private Date lastUpdated;
	private String lastUpdatedBy;
	private Set<InventoryTransaction> inventoryTransactions = new HashSet<InventoryTransaction>(0);
    private Set<InventoryWarehouse> inventoryWarehouses = new HashSet<InventoryWarehouse>(0);

    private String oldId;

    @Column(name = "old_id", length = 45)
    public String getOldId() {
        return this.oldId;
    }

    public void setOldId(String oldId) {
        this.oldId = oldId;
    }

    public Inventory() {
	}

    public Inventory(Company company, ProductOption productOption, boolean isActive, Date created, String createdBy, Date lastUpdated, String lastUpdatedBy) {
        this.company = company;
        this.productOption = productOption;
        this.isActive = isActive;
        this.created = created;
        this.createdBy = createdBy;
        this.lastUpdated = lastUpdated;
        this.lastUpdatedBy = lastUpdatedBy;
    }

    public Inventory(Company company, InventoryPurchaseItem inventoryPurchaseItem, ProductOption productOption, Integer maxStockAlert, Integer minStockAlert, boolean isActive, Date created, String createdBy, Date lastUpdated, String lastUpdatedBy, Set<InventoryTransaction> inventoryTransactions,
                     Set<InventoryWarehouse> inventoryWarehouses) {
        this.company = company;
        this.inventoryPurchaseItem = inventoryPurchaseItem;
        this.productOption = productOption;
        this.maxStockAlert = maxStockAlert;
        this.minStockAlert = minStockAlert;
        this.isActive = isActive;
        this.created = created;
        this.createdBy = createdBy;
        this.lastUpdated = lastUpdated;
        this.lastUpdatedBy = lastUpdatedBy;
        this.inventoryTransactions = inventoryTransactions;
        this.inventoryWarehouses = inventoryWarehouses;
    }

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "company_id", nullable = false)
    public Company getCompany() {
        return this.company;
    }

	public void setCompany(Company company) {
		this.company = company;
	}

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "inventory_purchase_item_id")
    public InventoryPurchaseItem getInventoryPurchaseItem() {
        return this.inventoryPurchaseItem;
    }

	public void setInventoryPurchaseItem(InventoryPurchaseItem inventoryPurchaseItem) {
		this.inventoryPurchaseItem = inventoryPurchaseItem;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "product_option_id", nullable = false)
	public ProductOption getProductOption() {
		return this.productOption;
	}

	public void setProductOption(ProductOption productOption) {
		this.productOption = productOption;
	}

	@Column(name = "max_stock_alert")
	public Integer getMaxStockAlert() {
		return this.maxStockAlert;
	}

	public void setMaxStockAlert(Integer maxStockAlert) {
		this.maxStockAlert = maxStockAlert;
	}

	@Column(name = "min_stock_alert")
	public Integer getMinStockAlert() {
		return this.minStockAlert;
	}

	public void setMinStockAlert(Integer minStockAlert) {
		this.minStockAlert = minStockAlert;
	}

	@Column(name = "is_active", nullable = false)
	public boolean isIsActive() {
		return this.isActive;
	}

	public void setIsActive(boolean isActive) {
		this.isActive = isActive;
	}

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "created", nullable = false, length = 19)
    public Date getCreated() {
        return this.created;
    }

    public void setCreated(Date created) {
        this.created = created;
    }

    @Column(name = "created_by", nullable = false, length = 100)
    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "last_updated", nullable = false, length = 19)
    public Date getLastUpdated() {
        return this.lastUpdated;
    }

    public void setLastUpdated(Date lastUpdated) {
        this.lastUpdated = lastUpdated;
    }

    @Column(name = "last_updated_by", nullable = false, length = 100)
    public String getLastUpdatedBy() {
        return this.lastUpdatedBy;
    }

    public void setLastUpdatedBy(String lastUpdatedBy) {
        this.lastUpdatedBy = lastUpdatedBy;
    }

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "inventory", cascade = CascadeType.ALL)
	public Set<InventoryTransaction> getInventoryTransactions() {
		return this.inventoryTransactions;
	}

	public void setInventoryTransactions(Set<InventoryTransaction> inventoryTransactions) {
		this.inventoryTransactions = inventoryTransactions;
	}

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "inventory", cascade = CascadeType.ALL)
    @OrderBy(value = "id asc")
    public Set<InventoryWarehouse> getInventoryWarehouses() {
        return this.inventoryWarehouses;
    }

    public void setInventoryWarehouses(Set<InventoryWarehouse> inventoryWarehouses) {
        this.inventoryWarehouses = inventoryWarehouses;
    }

    @Transient
    public int getInventoryWarehouseTotal(){
        int total=0;
        for (InventoryWarehouse inventoryWarehouse:inventoryWarehouses){
            total=total+inventoryWarehouse.getQty();
        }
        return total;
    }

    @Transient
    public String getInventoryShop(){
        String inventoryShop="";
        for (InventoryWarehouse inventoryWarehouse:inventoryWarehouses){
            inventoryShop=inventoryShop+inventoryWarehouse.getShop().getName()+":"+inventoryWarehouse.getQty()+"/";
        }
        inventoryShop= inventoryShop.substring(0,inventoryShop.length()-1);
        return inventoryShop;
    }
    @Transient
    public String getIsActiveYOrN(){
        String isActive="";
       if(this.isActive){
           isActive="Y";
       }else {
           isActive="N";
       }
        return isActive;
    }

}
