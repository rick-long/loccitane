package org.spa.model.inventory;
// Generated 2016-3-31 15:50:45 by Hibernate Tools 4.3.1.Final

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.spa.model.product.ProductOption;

/**
 * InventoryPurchaseItem generated by hbm2java
 */
@Entity
@Table(name = "INVENTORY_PURCHASE_ITEM", catalog = "loccitane")
public class InventoryPurchaseItem implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Long id;
	private InventoryPurchaseOrder inventoryPurchaseOrder;
	private ProductOption productOption;
	private Integer qty;
	private BigDecimal cost;
	private BigDecimal total;
	private boolean isReceiveGoods;
	private boolean isActive;
	private Date created;
	private String createdBy;
	private Date lastUpdated;
	private String lastUpdatedBy;
	private Set<Inventory> inventories = new HashSet<Inventory>(0);

	public InventoryPurchaseItem() {
	}

	public InventoryPurchaseItem(InventoryPurchaseOrder inventoryPurchaseOrder, ProductOption productOption,
			boolean isReceiveGoods, boolean isActive) {
		this.inventoryPurchaseOrder = inventoryPurchaseOrder;
		this.productOption = productOption;
		this.isReceiveGoods = isReceiveGoods;
		this.isActive = isActive;
	}

	public InventoryPurchaseItem(InventoryPurchaseOrder inventoryPurchaseOrder, ProductOption productOption,
			Integer qty, BigDecimal cost, BigDecimal total, boolean isReceiveGoods, boolean isActive, Date created,
			String createdBy, Date lastUpdated, String lastUpdatedBy, Set<Inventory> inventories) {
		this.inventoryPurchaseOrder = inventoryPurchaseOrder;
		this.productOption = productOption;
		this.qty = qty;
		this.cost = cost;
		this.total = total;
		this.isReceiveGoods = isReceiveGoods;
		this.isActive = isActive;
		this.created = created;
		this.createdBy = createdBy;
		this.lastUpdated = lastUpdated;
		this.lastUpdatedBy = lastUpdatedBy;
		this.inventories = inventories;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "inventory_purchase_order_id", nullable = false)
	public InventoryPurchaseOrder getInventoryPurchaseOrder() {
		return this.inventoryPurchaseOrder;
	}

	public void setInventoryPurchaseOrder(InventoryPurchaseOrder inventoryPurchaseOrder) {
		this.inventoryPurchaseOrder = inventoryPurchaseOrder;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "product_option_id", nullable = false)
	public ProductOption getProductOption() {
		return this.productOption;
	}

	public void setProductOption(ProductOption productOption) {
		this.productOption = productOption;
	}

	@Column(name = "qty")
	public Integer getQty() {
		return this.qty;
	}

	public void setQty(Integer qty) {
		this.qty = qty;
	}

	@Column(name = "cost", precision = 18)
	public BigDecimal getCost() {
		return this.cost;
	}

	public void setCost(BigDecimal cost) {
		this.cost = cost;
	}

	@Column(name = "total", precision = 18)
	public BigDecimal getTotal() {
		return this.total;
	}

	public void setTotal(BigDecimal total) {
		this.total = total;
	}

	@Column(name = "is_receive_goods", nullable = false)
	public boolean isIsReceiveGoods() {
		return this.isReceiveGoods;
	}

	public void setIsReceiveGoods(boolean isReceiveGoods) {
		this.isReceiveGoods = isReceiveGoods;
	}

	@Column(name = "is_active", nullable = false)
	public boolean isIsActive() {
		return this.isActive;
	}

	public void setIsActive(boolean isActive) {
		this.isActive = isActive;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", length = 19)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Column(name = "created_by", length = 100)
	public String getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_updated", length = 19)
	public Date getLastUpdated() {
		return this.lastUpdated;
	}

	public void setLastUpdated(Date lastUpdated) {
		this.lastUpdated = lastUpdated;
	}

	@Column(name = "last_updated_by", length = 100)
	public String getLastUpdatedBy() {
		return this.lastUpdatedBy;
	}

	public void setLastUpdatedBy(String lastUpdatedBy) {
		this.lastUpdatedBy = lastUpdatedBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "inventoryPurchaseItem")
	public Set<Inventory> getInventories() {
		return this.inventories;
	}

	public void setInventories(Set<Inventory> inventories) {
		this.inventories = inventories;
	}

    /**
     * 已经收到的产品数目
     */
    @Transient
    public int getReceivedAmount() {
        int amount = 0;
        Set<InventoryPurchaseOrderShipment> shipmentSet = inventoryPurchaseOrder.getInventoryPurchaseOrderShipments();
        for(InventoryPurchaseOrderShipment shipment : shipmentSet) {
            for(InventoryPurchaseOrderShipmentItem item : shipment.getInventoryPurchaseOrderShipmentItems()) {
                if(productOption.getId().equals(item.getProductOption().getId())){
                    amount += item.getQty();
                }
            }
        }
        return amount;
    }
}
