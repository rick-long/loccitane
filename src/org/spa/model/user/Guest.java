package org.spa.model.user;
// Generated 2017-1-22 15:48:27 by Hibernate Tools 4.3.1

import com.spa.constant.CommonConstant;
import org.spa.model.book.Book;
import org.spa.model.shop.Address;
import org.spa.model.shop.Phone;
import org.spa.model.shop.Shop;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

/**
 * Guest generated by hbm2java
 */
@Entity
@Table(name = "GUEST", catalog = "loccitane")
public class Guest implements java.io.Serializable {

    private Long id;
    private Shop shop;

    /**
     * 用户名.
     */
    private String username;

    /**
     * 名.
     */
    private String firstName;

    /**
     * 姓.
     */
    private String lastName;
    private String fullName;

    /**
     * 密码.
     */
    private String password;

    /**
     * 邮箱.
     */
    private String email;

    /**
     * （会员入会/员工入职）日期.
     */
    private Date joinDate;

    /**
     * 是否有效.
     */
    private boolean isActive;

    /**
     * 创建时间.
     */
    private Date created;

    /**
     * 创建者.
     */
    private String createdBy;

    /**
     * 更新时间.
     */
    private Date lastUpdated;

    /**
     * 更新者.
     */
    private String lastUpdatedBy;
    private Set<Book> books = new HashSet<Book>(0);
    private Set<Phone> phones = new HashSet<Phone>(0);
    private Set<Address> addresses = new HashSet<Address>(0);

    public Guest() {
    }

    public Guest(String username, String email, boolean isActive) {
        this.username = username;
        this.email = email;
        this.isActive = isActive;
    }

    public Guest(Shop shop, String username, String firstName, String lastName, String fullName, String password, String email, Date joinDate, boolean isActive, Date created, String createdBy, Date lastUpdated, String lastUpdatedBy, Set<Book> books, Set<Phone> phones) {
        this.shop = shop;
        this.username = username;
        this.firstName = firstName;
        this.lastName = lastName;
        this.fullName = fullName;
        this.password = password;
        this.email = email;
        this.joinDate = joinDate;
        this.isActive = isActive;
        this.created = created;
        this.createdBy = createdBy;
        this.lastUpdated = lastUpdated;
        this.lastUpdatedBy = lastUpdatedBy;
        this.books = books;
        this.phones = phones;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "id", unique = true, nullable = false)
    public Long getId() {
        return this.id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "shop_id")
    public Shop getShop() {
        return this.shop;
    }

    public void setShop(Shop shop) {
        this.shop = shop;
    }

    @Column(name = "username", nullable = false, length = 45)
    public String getUsername() {
        return this.username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    @Column(name = "first_name", length = 45)
    public String getFirstName() {
        return this.firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    @Column(name = "last_name", length = 45)
    public String getLastName() {
        return this.lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    @Column(name = "full_name")
    public String getFullName() {
        return this.fullName;
    }

    public void setFullName(String fullName) {
        this.fullName = fullName;
    }

    @Column(name = "password", length = 100)
    public String getPassword() {
        return this.password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    @Column(name = "email", length = 100)
    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "join_date", length = 19)
    public Date getJoinDate() {
        return this.joinDate;
    }

    public void setJoinDate(Date joinDate) {
        this.joinDate = joinDate;
    }

    @Column(name = "is_active", nullable = false)
    public boolean isIsActive() {
        return this.isActive;
    }

    public void setIsActive(boolean isActive) {
        this.isActive = isActive;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "created", length = 19)
    public Date getCreated() {
        return this.created;
    }

    public void setCreated(Date created) {
        this.created = created;
    }

    @Column(name = "created_by", length = 100)
    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "last_updated", length = 19)
    public Date getLastUpdated() {
        return this.lastUpdated;
    }

    public void setLastUpdated(Date lastUpdated) {
        this.lastUpdated = lastUpdated;
    }

    @Column(name = "last_updated_by", length = 100)
    public String getLastUpdatedBy() {
        return this.lastUpdatedBy;
    }

    public void setLastUpdatedBy(String lastUpdatedBy) {
        this.lastUpdatedBy = lastUpdatedBy;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "guest")
    public Set<Book> getBooks() {
        return this.books;
    }

    public void setBooks(Set<Book> books) {
        this.books = books;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "guest", cascade = CascadeType.ALL, orphanRemoval = true)
    public Set<Phone> getPhones() {
        return this.phones;
    }

    public void setPhones(Set<Phone> phones) {
        this.phones = phones;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "guest", cascade = CascadeType.ALL, orphanRemoval = true)
    public Set<Address> getAddresses() {
        return this.addresses;
    }

    public void setAddresses(Set<Address> addresses) {
        this.addresses = addresses;
    }

    @Transient
    public String getMobilePhone() {
        if (phones.size() > 0) {
            for (Phone phone : phones) {
                if (CommonConstant.PHONE_TYPE_MOBILE.equals(phone.getType())) {
                    return phone.getNumber();
                }
            }
        }
        return "";
    }

    @Transient
    public String getMobilePhoneHiddenPart() {
        if (phones.size() > 0) {
            for (Phone phone : phones) {
                if (CommonConstant.PHONE_TYPE_MOBILE.equals(phone.getType())) {
                    String hiddenPart;
                    String num = phone.getNumber();
                    int length = num.length();
                    if (length > 4) {
                        hiddenPart = "****" + num.substring(length - 4, length);
                    } else {
                        hiddenPart = "****" + num;
                    }
                    return hiddenPart;
                }
            }
        }
        return "";
    }

    @Transient
    public String getCountry() {
        if (addresses.size() > 0) {
            return addresses.iterator().next().getCountry();
        }
        return "";
    }


}
