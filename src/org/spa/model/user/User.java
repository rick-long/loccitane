package org.spa.model.user;
// Generated 2016-3-31 15:50:45 by Hibernate Tools 4.3.1.Final

import com.spa.constant.CommonConstant;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Where;
import org.spa.model.awardRedemption.AwardRedemptionTransaction;
import org.spa.model.book.Book;
import org.spa.model.book.BookItemTherapist;
import org.spa.model.company.Company;
import org.spa.model.loyalty.LoyaltyLevel;
import org.spa.model.loyalty.UserLoyaltyLevel;
import org.spa.model.marketing.MktOutbox;
import org.spa.model.order.PurchaseOrder;
import org.spa.model.order.StaffCommission;
import org.spa.model.payroll.PayrollTemplate;
import org.spa.model.payroll.StaffPayroll;
import org.spa.model.points.LoyaltyPointsTransaction;
import org.spa.model.points.SpaPointsTransaction;
import org.spa.model.prepaid.Prepaid;
import org.spa.model.privilege.SysRole;
import org.spa.model.salesforce.UserMarketingCampaignTransaction;
import org.spa.model.shop.Address;
import org.spa.model.shop.Phone;
import org.spa.model.shop.Room;
import org.spa.model.shop.Shop;
import org.spa.model.staff.StaffHoliday;
import org.spa.model.staff.StaffHomeShopDetails;
import org.spa.model.staff.StaffPayrollAttribute;
import org.spa.model.staff.StaffTreatments;
import org.spa.serviceImpl.loyalty.LoyaltyLevelServiceImpl;
import org.spa.serviceImpl.loyalty.UserLoyaltyLevelServiceImpl;
import org.spa.serviceImpl.points.LoyaltyPointsTransactionServiceImpl;
import org.spa.serviceImpl.prepaid.PrepaidServiceImpl;
import org.spa.serviceImpl.user.ConsentFormServiceImpl;
import org.spa.serviceImpl.user.UserServiceImpl;
import org.spa.utils.SpringUtil;

import javax.persistence.*;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * User generated by hbm2java
 */
@Entity
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
@Table(name = "USER", catalog = "loccitane", uniqueConstraints = { @UniqueConstraint(columnNames = { "company_id", "account_type", "email" }), @UniqueConstraint(columnNames = { "company_id", "account_type", "username" }) })
public class User implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Long id;
	private Company company;
	private Shop shop;//home shop for member
	private User user; // prefer therapist
	private User therapist2; // prefer therapist2
	private User therapist3; // prefer therapist3

	private Shop preferredShop;
	private Room preferredRoom;

	private String username;
	private String firstName;
	private String lastName;
	private String fullName;
	
	private String password;
	private String gender;
	private String email;
	private boolean enabled;
	private String accountType;
	private Date joinDate;
	private Date created;
	private String createdBy;
	private Date lastUpdated;
	private String lastUpdatedBy;
	private String preferredContact;
	private Date dateOfBirth;
	private String notification;
    private Boolean activing;
    private String remarks;
    private String airmilesMembershipNumber;
    private String displayName;
    private Boolean hasMPF;
    
    private Date backUpDate;

    // create by william -- 2018-8-27
	private String barcode;
	private String pin;
    
    private Long oldId;
    private Date lastModifier; // for importing to salesforce
    private Date lastSFUpdated; // for update by salesforce
    private Boolean optedOut;// for salesforce marketing,it is similar as subsciber in sot system
    
    private Set<StaffCommission> staffCommissions = new HashSet<StaffCommission>(0);
    private Set<MktOutbox> mktOutboxes = new HashSet<MktOutbox>(0);
    private Set<Address> addresses = new HashSet<Address>(0);
    private Set<SysRole> sysRoles = new HashSet<SysRole>(0);
    private Set<org.spa.model.book.BookItemTherapist> bookItemTherapists = new HashSet<BookItemTherapist>(0);
    private Set<UserLoyaltyLevel> userLoyaltyLevels = new HashSet<UserLoyaltyLevel>(0);
    private Set<User> users = new HashSet<User>(0);
    private Set<StaffHoliday> staffHolidays = new HashSet<StaffHoliday>(0);
    private Set<Book> books = new HashSet<Book>(0);
    private Set<LoyaltyPointsTransaction> loyaltyPointsTransactions = new HashSet<LoyaltyPointsTransaction>(0);
    private Set<UserGroup> userGroups = new HashSet<UserGroup>(0);
    private Set<SpaPointsTransaction> spaPointsTransactions = new HashSet<SpaPointsTransaction>(0);
    private Set<PurchaseOrder> purchaseOrders = new HashSet<PurchaseOrder>(0);
    private Set<UserLoginHistory> userLoginHistories = new HashSet<UserLoginHistory>(0);
    private Set<AwardRedemptionTransaction> awardRedemptionTransactions = new HashSet<AwardRedemptionTransaction>(0);
    private Set<Prepaid> prepaids = new HashSet<Prepaid>(0);
    private Set<Phone> phones = new HashSet<Phone>(0);
    private Set<UserCode> userCodes = new HashSet<UserCode>(0);
//    private Set<StaffPayroll> staffPayrolls = new HashSet<StaffPayroll>(0);
    private Set<UserFamilyDetails> userFamilyDetailses = new HashSet<UserFamilyDetails>(0);
    private Set<CommunicationChannel> communicationChannels = new HashSet<CommunicationChannel>(0);
    private Set<StaffPayrollAttribute> staffPayrollAttributes = new HashSet<StaffPayrollAttribute>(0);
    private Set<StaffTreatments> staffTreatmentses = new HashSet<StaffTreatments>(0);
    
    private Set<StaffPayroll> staffPayrolls = new HashSet<StaffPayroll>(0);;
    private Set<ConsentFormUser> consentFormUsers = new HashSet<ConsentFormUser>(0);
    //this is the home shops for staff
    private Set<Shop> staffHomeShops=new HashSet<Shop>(0);
    
    private Set<UserMarketingCampaignTransaction> userMarketingCampaignTransactions=new HashSet<UserMarketingCampaignTransaction>(0);

	private Set<StaffHomeShopDetails> staffHomeShopDetailses = new HashSet<StaffHomeShopDetails>(0);


	private boolean showOnApps;
	 /**
     * 用户角色集合, 非数据库字段
     */
    @Transient
    private Set<String> roleSet = new HashSet<>();
    
    @Transient
    private List<User> preferredTherapists = new ArrayList<>();

    /**
     * 用户权限集合, 非数据库字段
     */
    @Transient
    private Set<String> permissionSet = new HashSet<>();
	
	public User() {
	}

    public User(String username, String email, boolean enabled) {
        this.username = username;
        this.email = email;
        this.enabled = enabled;
    }

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "company_id")
	public Company getCompany() {
		return this.company;
	}

	public void setCompany(Company company) {
		this.company = company;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "shop_id")
	public Shop getShop() {
		return this.shop;
	}

	public void setShop(Shop shop) {
		this.shop = shop;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "preferred_shop_id")
	public Shop getPreferredShop() {
		return this.preferredShop;
	}

	public void setPreferredShop(Shop preferredShop) {
		this.preferredShop = preferredShop;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "preferred_room_id")
	public Room getPreferredRoom() {
		return this.preferredRoom;
	}

	public void setPreferredRoom(Room preferredRoom) {
		this.preferredRoom = preferredRoom;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "preferred_therapist_id")
	public User getUser() {
		return this.user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "preferred_therapist2_id")
	public User getTherapist2() {
		return this.therapist2;
	}

	public void setTherapist2(User therapist2) {
		this.therapist2 = therapist2;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "preferred_therapist3_id")
	public User getTherapist3() {
		return this.therapist3;
	}

	public void setTherapist3(User therapist3) {
		this.therapist3 = therapist3;
	}

	@Column(name = "username", nullable = false, length = 45)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "first_name", length = 45)
	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	@Column(name = "last_name", length = 45)
	public String getLastName() {
		return this.lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	@Column(name = "password", length = 100)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "gender", length = 45)
	public String getGender() {
		return this.gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	@Column(name = "email", nullable = false, length = 100)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "enabled", nullable = false)
	public boolean isEnabled() {
		return this.enabled;
	}

	public void setEnabled(boolean enabled) {
		this.enabled = enabled;
	}

	@Column(name = "account_type", length = 45)
	public String getAccountType() {
		return this.accountType;
	}

	public void setAccountType(String accountType) {
		this.accountType = accountType;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "join_date", length = 19)
	public Date getJoinDate() {
		return this.joinDate;
	}

	public void setJoinDate(Date joinDate) {
		this.joinDate = joinDate;
	}
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "back_up_date", length = 19)
	public Date getBackUpDate() {
		return backUpDate;
	}
	public void setBackUpDate(Date backUpDate) {
		this.backUpDate = backUpDate;
	}
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", length = 19)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Column(name = "created_by", length = 100)
	public String getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_updated", length = 19)
	public Date getLastUpdated() {
		return this.lastUpdated;
	}

	public void setLastUpdated(Date lastUpdated) {
		this.lastUpdated = lastUpdated;
	}

	@Column(name = "last_updated_by", length = 100)
	public String getLastUpdatedBy() {
		return this.lastUpdatedBy;
	}

	public void setLastUpdatedBy(String lastUpdatedBy) {
		this.lastUpdatedBy = lastUpdatedBy;
	}

	@Column(name = "preferred_contact", length = 45)
	public String getPreferredContact() {
		return this.preferredContact;
	}

	public void setPreferredContact(String preferredContact) {
		this.preferredContact = preferredContact;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "date_of_birth", length = 19)
	public Date getDateOfBirth() {
		return this.dateOfBirth;
	}

	public void setDateOfBirth(Date dateOfBirth) {
		this.dateOfBirth = dateOfBirth;
	}

	@Column(name = "notification", length = 45)
	public String getNotification() {
		return this.notification;
	}

	public void setNotification(String notification) {
		this.notification = notification;
	}
	
    @Column(name = "activing")
    public Boolean getActiving() {
        return this.activing;
    }

    public void setActiving(Boolean activing) {
        this.activing = activing;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
    public Set<MktOutbox> getMktOutboxes() {
        return this.mktOutboxes;
    }

    public void setMktOutboxes(Set<MktOutbox> mktOutboxes) {
        this.mktOutboxes = mktOutboxes;
    }

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user",cascade = CascadeType.ALL)
	public Set<Address> getAddresses() {
		return this.addresses;
	}

	public void setAddresses(Set<Address> addresses) {
		this.addresses = addresses;
	}

    @ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    @JoinTable(name = "sys_user_role", catalog = "loccitane", joinColumns = { @JoinColumn(name = "user_id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "role_id", nullable = false, updatable = false) })
    public Set<SysRole> getSysRoles() {
        return this.sysRoles;
    }

    public void setSysRoles(Set<SysRole> sysRoles) {
        this.sysRoles = sysRoles;
    }
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<SpaPointsTransaction> getSpaPointsTransactions() {
		return this.spaPointsTransactions;
	}

	public void setSpaPointsTransactions(Set<SpaPointsTransaction> spaPointsTransactions) {
		this.spaPointsTransactions = spaPointsTransactions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user",cascade = CascadeType.ALL)
	public Set<UserLoyaltyLevel> getUserLoyaltyLevels() {
		return this.userLoyaltyLevels;
	}

	public void setUserLoyaltyLevels(Set<UserLoyaltyLevel> userLoyaltyLevels) {
		this.userLoyaltyLevels = userLoyaltyLevels;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<UserLoginHistory> getUserLoginHistories() {
		return this.userLoginHistories;
	}

	public void setUserLoginHistories(Set<UserLoginHistory> userLoginHistories) {
		this.userLoginHistories = userLoginHistories;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<User> getUsers() {
		return this.users;
	}

	public void setUsers(Set<User> users) {
		this.users = users;
	}

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "user", cascade = CascadeType.ALL)
    public Set<StaffHoliday> getStaffHolidays() {
        return this.staffHolidays;
    }

    public void setStaffHolidays(Set<StaffHoliday> staffHolidays) {
        this.staffHolidays = staffHolidays;
    }

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Book> getBooks() {
		return this.books;
	}

	public void setBooks(Set<Book> books) {
		this.books = books;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<LoyaltyPointsTransaction> getLoyaltyPointsTransactions() {
		return this.loyaltyPointsTransactions;
	}

	public void setLoyaltyPointsTransactions(Set<LoyaltyPointsTransaction> loyaltyPointsTransactions) {
		this.loyaltyPointsTransactions = loyaltyPointsTransactions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
	public Set<Phone> getPhones() {
		return this.phones;
	}

	public void setPhones(Set<Phone> phones) {
		this.phones = phones;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "user_user_group", catalog = "loccitane", joinColumns = {
			@JoinColumn(name = "user_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "user_group_id", nullable = false, updatable = false) })
	public Set<UserGroup> getUserGroups() {
		return this.userGroups;
	}

	public void setUserGroups(Set<UserGroup> userGroups) {
		this.userGroups = userGroups;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Prepaid> getPrepaids() {
		return this.prepaids;
	}

	public void setPrepaids(Set<Prepaid> prepaids) {
		this.prepaids = prepaids;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<PurchaseOrder> getPurchaseOrders() {
		return this.purchaseOrders;
	}

	public void setPurchaseOrders(Set<PurchaseOrder> purchaseOrders) {
		this.purchaseOrders = purchaseOrders;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "staff")
	public Set<StaffCommission> getStaffCommissions() {
		return this.staffCommissions;
	}

	public void setStaffCommissions(Set<StaffCommission> staffCommissions) {
		this.staffCommissions = staffCommissions;
	}

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
    public Set<UserCode> getUserCodes() {
        return this.userCodes;
    }

    public void setUserCodes(Set<UserCode> userCodes) {
        this.userCodes = userCodes;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "redeemMember")
	public Set<AwardRedemptionTransaction> getAwardRedemptionTransactions() {
		return this.awardRedemptionTransactions;
	}

	public void setAwardRedemptionTransactions(Set<AwardRedemptionTransaction> awardRedemptionTransactions) {
		this.awardRedemptionTransactions = awardRedemptionTransactions;
	}
	
//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "staff")
//	public Set<StaffPayroll> getStaffPayrolls() {
//		return this.staffPayrolls;
//	}
//
//	public void setStaffPayrolls(Set<StaffPayroll> staffPayrolls) {
//		this.staffPayrolls = staffPayrolls;
//	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<UserFamilyDetails> getUserFamilyDetailses() {
		return this.userFamilyDetailses;
	}

	public void setUserFamilyDetailses(Set<UserFamilyDetails> userFamilyDetailses) {
		this.userFamilyDetailses = userFamilyDetailses;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "staff")
	public Set<StaffPayroll> getStaffPayrolls() {
		return staffPayrolls;
	}
	public void setStaffPayrolls(Set<StaffPayroll> staffPayrolls) {
		this.staffPayrolls = staffPayrolls;
	}
	
	@Column(name = "remarks")
	public String getRemarks() {
		return this.remarks;
	}

	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}
	
	@Column(name = "airmiles_membership_number")
	public String getAirmilesMembershipNumber() {
		return airmilesMembershipNumber;
	}
	public void setAirmilesMembershipNumber(String airmilesMembershipNumber) {
		this.airmilesMembershipNumber = airmilesMembershipNumber;
	}
	
	@ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinTable(name = "user_communication_channel", catalog = "loccitane", joinColumns = {
			@JoinColumn(name = "user_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "communication_channel_id", nullable = false, updatable = false) })
	public Set<CommunicationChannel> getCommunicationChannels() {
		return this.communicationChannels;
	}

	public void setCommunicationChannels(Set<CommunicationChannel> communicationChannels) {
		this.communicationChannels = communicationChannels;
	}
	
	@Column(name = "display_name", length = 100)
	public String getDisplayName() {
		return displayName;
	}
	public void setDisplayName(String displayName) {
		this.displayName = displayName;
	}
	@Column(name = "full_name", length = 100)
	public String getFullName() {
		if(StringUtils.isNoneEmpty(fullName)){
			return fullName;
		}else{
			return (StringUtils.isNoneEmpty(firstName) ? firstName+" " : "")+(StringUtils.isNoneEmpty(lastName) ? lastName : "");
		}
	}
	public void setFullName(String fullName) {
		this.fullName = fullName;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "staff", cascade = CascadeType.ALL, orphanRemoval = true)
	public Set<StaffPayrollAttribute> getStaffPayrollAttributes() {
		return this.staffPayrollAttributes;
	}

	public void setStaffPayrollAttributes(Set<StaffPayrollAttribute> staffPayrollAttributes) {
		this.staffPayrollAttributes = staffPayrollAttributes;
	}
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "staff", cascade = CascadeType.ALL, orphanRemoval = true)
	public Set<StaffTreatments> getStaffTreatmentses() {
		return this.staffTreatmentses;
	}

	public void setStaffTreatmentses(Set<StaffTreatments> staffTreatmentses) {
		this.staffTreatmentses = staffTreatmentses;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user",cascade = CascadeType.ALL, orphanRemoval = true)
	public Set<ConsentFormUser> getConsentFormUsers() {
		return this.consentFormUsers;
	}

	public void setConsentFormUsers(Set<ConsentFormUser> consentFormUsers) {
		this.consentFormUsers = consentFormUsers;
	}
	
	@ManyToMany(fetch = FetchType.LAZY,cascade = CascadeType.ALL)
    @JoinTable(name = "staff_home_shop", catalog = "loccitane", joinColumns = { 
    		@JoinColumn(name = "staff_id", nullable = false, updatable = false) }, inverseJoinColumns = { 
    				@JoinColumn(name = "shop_id", nullable = false, updatable = false) })
	public Set<Shop> getStaffHomeShops() {
		return staffHomeShops;
	}
	public void setStaffHomeShops(Set<Shop> staffHomeShops) {
		this.staffHomeShops = staffHomeShops;
	}
	
	@Column(name = "old_id", unique = true)
	public Long getOldId() {
		return oldId;
	}
	public void setOldId(Long oldId) {
		this.oldId = oldId;
	}
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_modifier", length = 19)
	public Date getLastModifier() {
		return lastModifier;
	}
	public void setLastModifier(Date lastModifier) {
		this.lastModifier = lastModifier;
	}
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_SF_updated", length = 19)
	public Date getLastSFUpdated() {
		return lastSFUpdated;
	}
	public void setLastSFUpdated(Date lastSFUpdated) {
		this.lastSFUpdated = lastSFUpdated;
	}
	@Column(name = "opted_out", nullable = false)
	public Boolean getOptedOut() {
		return optedOut;
	}
	public void setOptedOut(Boolean optedOut) {
		this.optedOut = optedOut;
	}

	@Column(name = "barcode", nullable = true, length = 32)
	public String getBarcode() {
		return barcode;
	}

	public void setBarcode(String barCode) {
		this.barcode = barCode;
	}

	@Column(name = "pin", nullable = true, length = 32)
	public String getPin() {
		return pin;
	}

	public void setPin(String pin) {
		this.pin = pin;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<UserMarketingCampaignTransaction> getUserMarketingCampaignTransactions() {
		return userMarketingCampaignTransactions;
	}
	public void setUserMarketingCampaignTransactions(
			Set<UserMarketingCampaignTransaction> userMarketingCampaignTransactions) {
		this.userMarketingCampaignTransactions = userMarketingCampaignTransactions;
	}
	
	@Column(name = "has_MPF",nullable = false)
	public Boolean getHasMPF() {
		return hasMPF;
	}
	public void setHasMPF(Boolean hasMPF) {
		this.hasMPF = hasMPF;
	}

	@Column(name = "show_on_apps", nullable = false)
	public boolean getShowOnApps() {
		return showOnApps;
	}

	public void setShowOnApps(boolean showOnApps) {
		this.showOnApps = showOnApps;
	}


	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	@Where(clause = "is_active=1")
	@OrderBy(value = "sort asc")
	public Set<StaffHomeShopDetails> getStaffHomeShopDetailses() {
		return this.staffHomeShopDetailses;
	}

	public void setStaffHomeShopDetailses(Set<StaffHomeShopDetails> staffHomeShopDetailses) {
		this.staffHomeShopDetailses = staffHomeShopDetailses;
	}


	@Transient
    public Boolean isMember(){
    	Boolean isMember=false;
    	if(getAccountType().equals(CommonConstant.USER_ACCOUNT_TYPE_MEMBER)){
    		isMember=true;
    	}
    	return isMember;
    }
    
    @Transient
    public LoyaltyLevel getCurrentLoyaltyLevel(){
    	LoyaltyLevel ll=SpringUtil.getBean(UserLoyaltyLevelServiceImpl.class).getCurrentLLOfUser(getId());
    	return ll;
    }
    
    @Transient
    public LoyaltyLevel getNextLoyaltyLevel(){
    	LoyaltyLevel ll=SpringUtil.getBean(LoyaltyLevelServiceImpl.class).getNextLoyaltyLevel(getCurrentLoyaltyLevel());
    	return ll;
    }
    
    @Transient
    public Set<String> getRoleSet() {
        return roleSet;
    }

    @Transient
    public void setRoleSet(Set<String> roleSet) {
        this.roleSet = roleSet;
    }

    @Transient
    public Set<String> getPermissionSet() {
        return permissionSet;
    }

    @Transient
    public void setPermissionSet(Set<String> permissionSet) {
        this.permissionSet = permissionSet;
    }
    
    @Override
    public String toString() {
        return "User [id=" + id + ", username=" + username + ", accountType=" + accountType + ", getFullName()=" + getFullName() + "]";
    }
    
    @Transient
    public SysRole getFirstRoleForStaff(){
    	Set<SysRole> set=getSysRoles();
    	if(set !=null && set.size()>0){
    		return set.iterator().next();
    	}
    	return null;
    }

    @Transient
    public String getMobilePhoneHiddenPart() {
        Optional<Phone> phoneOptional = phones.stream().filter(p -> CommonConstant.PHONE_TYPE_MOBILE.equals(p.getType())).findFirst();
        if (phoneOptional.isPresent()) {
            return phoneOptional.get().getPhoneNumberHiddenPart();
        }
        return "";
    }
    @Transient
    public String getMobilePhone() {
        Optional<Phone> phoneOptional = phones.stream().filter(p -> CommonConstant.PHONE_TYPE_MOBILE.equals(p.getType())).findFirst();
        if (phoneOptional.isPresent()) {
            return phoneOptional.get().getNumber();
        }
        return "";
    }
    @Transient
    public String getHomePhone() {
        Optional<Phone> phoneOptional = phones.stream().filter(p -> CommonConstant.PHONE_TYPE_HOME.equals(p.getType())).findFirst();
        if (phoneOptional.isPresent()) {
            return phoneOptional.get().getNumber();
        }
        return "";
    }
    @Transient
    public String getBusinessPhone() {
        Optional<Phone> phoneOptional = phones.stream().filter(p -> CommonConstant.PHONE_TYPE_BUSINESS.equals(p.getType())).findFirst();
        if (phoneOptional.isPresent()) {
            return phoneOptional.get().getNumber();
        }
        return "";
    }
    @Transient
    public PayrollTemplate getPayrollTemplate(){
    	PayrollTemplate pt=null;
    	if(getStaffPayrollAttributes() !=null && getStaffPayrollAttributes().size()>0){
    		StaffPayrollAttribute spa=getStaffPayrollAttributes().iterator().next();
    		pt=spa.getPayrollAttributeKey().getPayrollTemplate();
    	}
    	return pt;
    }

    @Transient
    public StaffHoliday getStaffHoliday() {
        Optional<StaffHoliday> staffHoliday = staffHolidays.stream().findFirst();
        if (staffHoliday.isPresent()) {
            return staffHoliday.get();
        }
        return null;
    }
    
    
    @Transient
    public double getRemainLoyaltyPoints(){
    	Double remainLP=SpringUtil.getBean(LoyaltyPointsTransactionServiceImpl.class).getRemainLoyaltyPointsByUser(getId(), new Date());
    	return remainLP;
    }
    
    @Transient
    public ConsentFormUser getConsentFormDetails(Long consentFormId){
    	ConsentFormUser cfu=SpringUtil.getBean(ConsentFormServiceImpl.class).getconsentFormUserBySignedConsentForm(consentFormId, getId());
    	return cfu;
    }

    @Transient
    public boolean isGuest() {
        return CommonConstant.USER_ACCOUNT_TYPE_GUEST.equals(accountType);
    }
    
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((id == null) ? 0 : id.hashCode());
        return result;
    }

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (!(obj instanceof User))
			return false;
		User other = (User) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}
    
    @Transient
    public Double getNeedMoneyToGetNextLevel()
	  {
    	return SpringUtil.getBean(UserServiceImpl.class).getNeedMoneyToGetNextLevel(getId());
	  }
    
    @Transient
    public Double getNeedMoneyToRenewCurrentLevel()
	  {
    	return SpringUtil.getBean(UserServiceImpl.class).getNeedMoneyToRenewCurrentLevel(getId());
	  }
    
    @Transient
    public Double getRemainValueOfCashPackage()
	  {
    	return SpringUtil.getBean(UserServiceImpl.class).getRemainValueOfCashPackage(getId());
	  }
    
	@Transient
	public boolean hasShopManageRole() {
		String[] refs = this.getSysRoles().stream().map(SysRole::getReference).toArray(String[]::new);
		for (String ref : refs) {
			if (ref.equals(CommonConstant.STAFF_ROLE_REF_SHOP_MANAGER)
					|| ref.equals(CommonConstant.STAFF_ROLE_REF_SHOP_MANAGER_T)
					|| ref.equals(CommonConstant.STAFF_ROLE_REF_ADMIN)) {
				return true;
			}
		}
		return false;
	}

	@Transient
	public String getFullNameEscape() {
		String fullName=getFullName();
		if(StringUtils.isEmpty(fullName)){
			fullName=getFirstName()+getLastName();
		}
		return fullName.replaceAll("'", "\\\\'");
	}
	
	@Transient
    public Boolean getCheckWhetherHasExpiringPackage()
	  {
    	return SpringUtil.getBean(PrepaidServiceImpl.class).checkWhetherHasExpiringPackage(getId());
	  }
	
	@Transient
	public List<User> getPreferredTherapists() {
        if(Objects.nonNull(getUser())) {
        	preferredTherapists.add(getUser());
        }
        if(Objects.nonNull(getTherapist2())) {
        	preferredTherapists.add(getTherapist2());
        }
        if(Objects.nonNull(getTherapist3())) {
        	preferredTherapists.add(getTherapist3());
        }
		return preferredTherapists;
	}
}
