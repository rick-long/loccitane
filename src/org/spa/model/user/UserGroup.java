package org.spa.model.user;
// Generated 2016-3-31 15:50:45 by Hibernate Tools 4.3.1.Final

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.spa.model.commission.CommissionRule;
import org.spa.model.company.Company;
import org.spa.model.discount.DiscountRule;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * UserGroup generated by hbm2java
 */
@Entity
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
@Table(name = "USER_GROUP", catalog = "loccitane")
public class UserGroup implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Long id;
    private Company company;
	private String name;
	private String reference;
	private String remarks;
	private boolean isActive;
	private String type;
	private String module;
	
	private Date created;
	private String createdBy;
	private Date lastUpdated;
	private String lastUpdatedBy;
    private Set<DiscountRule> discountRules = new HashSet<DiscountRule>(0);
	private Set<User> users = new HashSet<User>(0);
	private Set<CommissionRule> commissionRules = new HashSet<CommissionRule>(0);
	
	public UserGroup() {
	}

    public UserGroup(Company company, String reference, boolean isActive) {
        this.company = company;
        this.reference = reference;
        this.isActive = isActive;
    }

    public UserGroup(Company company, String name, String reference, String remarks, boolean isActive, Date created, String createdBy, 
    		Date lastUpdated, String lastUpdatedBy, Set<DiscountRule> discountRules, Set<User> users,String type,Set<CommissionRule> commissionRules,String module) {
        this.company = company;
        this.name = name;
        this.reference = reference;
        this.remarks = remarks;
        this.isActive = isActive;
        this.created = created;
        this.createdBy = createdBy;
        this.lastUpdated = lastUpdated;
        this.lastUpdatedBy = lastUpdatedBy;
        this.discountRules = discountRules;
        this.users = users;
        this.type=type;
        this.commissionRules=commissionRules;
        this.module=module;
    }

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "company_id", nullable = false)
    public Company getCompany() {
        return this.company;
    }

    public void setCompany(Company company) {
        this.company = company;
    }

	@Column(name = "name", length = 100)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "reference", nullable = false, length = 50)
	public String getReference() {
		return this.reference;
	}

	public void setReference(String reference) {
		this.reference = reference;
	}

	@Column(name = "remarks")
	public String getRemarks() {
		return this.remarks;
	}

	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}

	@Column(name = "is_active", nullable = false)
	public boolean isIsActive() {
		return this.isActive;
	}

	public void setIsActive(boolean isActive) {
		this.isActive = isActive;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", length = 19)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Column(name = "created_by", length = 100)
	public String getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_updated", length = 19)
	public Date getLastUpdated() {
		return this.lastUpdated;
	}

	public void setLastUpdated(Date lastUpdated) {
		this.lastUpdated = lastUpdated;
	}

	@Column(name = "last_updated_by", length = 100)
	public String getLastUpdatedBy() {
		return this.lastUpdatedBy;
	}

	public void setLastUpdatedBy(String lastUpdatedBy) {
		this.lastUpdatedBy = lastUpdatedBy;
	}

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "discount_rule_user_group", catalog = "loccitane", joinColumns = { @JoinColumn(name = "user_group_id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "discount_rule_id", nullable = false, updatable = false) })
    public Set<DiscountRule> getDiscountRules() {
        return this.discountRules;
    }

    public void setDiscountRules(Set<DiscountRule> discountRules) {
        this.discountRules = discountRules;
    }

	@ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinTable(name = "user_user_group", catalog = "loccitane", joinColumns = {
			@JoinColumn(name = "user_group_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "user_id", nullable = false, updatable = false) })
	public Set<User> getUsers() {
		return this.users;
	}

	public void setUsers(Set<User> users) {
		this.users = users;
	}
	
	@Column(name = "type", length = 100)
	public String getType() {
		return this.type;
	}

	public void setType(String type) {
		this.type = type;
	}
	@Column(name = "module", length = 100)
	public String getModule() {
		return module;
	}
	public void setModule(String module) {
		this.module = module;
	}
	
	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "commission_rule_user_group", catalog = "loccitane", joinColumns = {
			@JoinColumn(name = "user_group_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "commission_rule_id", nullable = false, updatable = false) })
	public Set<CommissionRule> getCommissionRules() {
		return this.commissionRules;
	}

	public void setCommissionRules(Set<CommissionRule> commissionRules) {
		this.commissionRules = commissionRules;
	}
}
