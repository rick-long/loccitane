package org.spa.model.payroll;
// Generated 2016-8-23 14:12:17 by Hibernate Tools 4.3.1.Final

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.apache.commons.lang3.StringUtils;
import org.spa.model.company.Company;
import org.spa.model.user.User;
import org.spa.serviceImpl.payroll.StaffPayrollAttributeStatisticsServiceImpl;
import org.spa.utils.SpringUtil;

import com.spa.constant.CommonConstant;

/**
 * StaffPayroll generated by hbm2java
 */
@Entity
@Table(name = "STAFF_PAYROLL", catalog = "loccitane")
public class StaffPayroll implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Long id;
	private Company company;
	private PayrollTemplate payrollTemplate;
	private User staff;
	private String payrollDate;
	
	private Double totalSale;
	private Double totalBonus;
	private Double totalCommission;
	private Double finalSalaryBeforeContribution;
	private Double contribution;
	private Boolean isUsedGm;
	private Double leavePays;
	private Double finalSalary;
	
	private String serviceHours;// for part time
	
	private String remarks;
	private boolean isActive;
	private Date created;
	private String createdBy;
	private Date lastUpdated;
	private String lastUpdatedBy;
	private Set<StaffPayrollAttributeStatistics> staffPayrollAttributeStatisticses = new HashSet<StaffPayrollAttributeStatistics>(
			0);
	private Set<StaffPayrollCategoryStatistics> staffPayrollCategoryStatisticses = new HashSet<StaffPayrollCategoryStatistics>(
			0);

	private Set<StaffPayrollAdditional> staffPayrollAdditionals = new HashSet<StaffPayrollAdditional>(0);
	
	public StaffPayroll() {
	}

	public StaffPayroll(Company company, PayrollTemplate payrollTemplate, User staff, String payrollDate,boolean isActive) {
		this.company = company;
		this.payrollTemplate = payrollTemplate;
		this.staff = staff;
		this.payrollDate = payrollDate;
		this.isActive = isActive;
	}

	public StaffPayroll(Company company, PayrollTemplate payrollTemplate, User staff, String payrollDate,String remarks, boolean isActive, Date created, String createdBy, Date lastUpdated,
			String lastUpdatedBy, Set<StaffPayrollAttributeStatistics> staffPayrollAttributeStatisticses,Set<StaffPayrollCategoryStatistics> staffPayrollCategoryStatisticses,
			Double totalBonus, Double totalCommission, Double contribution, Boolean isUsedGm,Double finalSalaryBeforeContribution,Double totalSale,String serviceHours,
			Set<StaffPayrollAdditional> staffPayrollAdditionals,Double leavePays,Double finalSalary) {
		this.company = company;
		this.payrollTemplate = payrollTemplate;
		this.staff = staff;
		this.payrollDate = payrollDate;
		this.totalSale=totalSale;
		this.totalBonus = totalBonus;
		this.totalCommission = totalCommission;
		this.contribution = contribution;
		this.isUsedGm = isUsedGm;
		this.serviceHours=serviceHours;
		this.remarks = remarks;
		this.isActive = isActive;
		this.created = created;
		this.createdBy = createdBy;
		this.lastUpdated = lastUpdated;
		this.lastUpdatedBy = lastUpdatedBy;
		this.staffPayrollAttributeStatisticses = staffPayrollAttributeStatisticses;
		this.staffPayrollCategoryStatisticses = staffPayrollCategoryStatisticses;
		this.finalSalaryBeforeContribution=finalSalaryBeforeContribution;
		this.staffPayrollAdditionals=staffPayrollAdditionals;
		this.leavePays=leavePays;
		this.finalSalary=finalSalary;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "company_id", nullable = false)
	public Company getCompany() {
		return this.company;
	}

	public void setCompany(Company company) {
		this.company = company;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "payroll_template_id", nullable = false)
	public PayrollTemplate getPayrollTemplate() {
		return this.payrollTemplate;
	}

	public void setPayrollTemplate(PayrollTemplate payrollTemplate) {
		this.payrollTemplate = payrollTemplate;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "staff_id", nullable = false)
	public User getStaff() {
		return staff;
	}
	public void setStaff(User staff) {
		this.staff = staff;
	}

	@Column(name = "payroll_date", nullable = false, length = 100)
	public String getPayrollDate() {
		return payrollDate;
	}
	public void setPayrollDate(String payrollDate) {
		this.payrollDate = payrollDate;
	}
	
	@Column(name = "total_sale", precision = 22, scale = 0)
	public Double getTotalSale() {
		return totalSale;
	}
	public void setTotalSale(Double totalSale) {
		this.totalSale = totalSale;
	}
	
	@Column(name = "total_bonus", precision = 22, scale = 0)
	public Double getTotalBonus() {
		return this.totalBonus;
	}

	public void setTotalBonus(Double totalBonus) {
		this.totalBonus = totalBonus;
	}

	@Column(name = "final_salary_before_contribution", precision = 22, scale = 0)
	public Double getFinalSalaryBeforeContribution() {
		return finalSalaryBeforeContribution;
	}
	public void setFinalSalaryBeforeContribution(Double finalSalaryBeforeContribution) {
		this.finalSalaryBeforeContribution = finalSalaryBeforeContribution;
	}
	
	public void setActive(boolean isActive) {
		this.isActive = isActive;
	}
	
	@Column(name = "total_commission", precision = 22, scale = 0)
	public Double getTotalCommission() {
		return this.totalCommission;
	}

	public void setTotalCommission(Double totalCommission) {
		this.totalCommission = totalCommission;
	}

	@Column(name = "contribution", precision = 22, scale = 0)
	public Double getContribution() {
		return this.contribution;
	}

	public void setContribution(Double contribution) {
		this.contribution = contribution;
	}

	@Column(name = "is_used_gm")
	public Boolean getIsUsedGm() {
		return this.isUsedGm;
	}

	public void setIsUsedGm(Boolean isUsedGm) {
		this.isUsedGm = isUsedGm;
	}
	
	@Column(name = "service_hours")
	public String getServiceHours() {
		return serviceHours;
	}
	public void setServiceHours(String serviceHours) {
		this.serviceHours = serviceHours;
	}
	
	@Column(name = "remarks")
	public String getRemarks() {
		return this.remarks;
	}

	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}

	@Column(name = "is_active", nullable = false)
	public boolean isIsActive() {
		return this.isActive;
	}

	public void setIsActive(boolean isActive) {
		this.isActive = isActive;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", length = 19)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Column(name = "created_by", length = 100)
	public String getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_updated", length = 19)
	public Date getLastUpdated() {
		return this.lastUpdated;
	}

	public void setLastUpdated(Date lastUpdated) {
		this.lastUpdated = lastUpdated;
	}

	@Column(name = "last_updated_by", length = 100)
	public String getLastUpdatedBy() {
		return this.lastUpdatedBy;
	}

	public void setLastUpdatedBy(String lastUpdatedBy) {
		this.lastUpdatedBy = lastUpdatedBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "staffPayroll",cascade = CascadeType.ALL, orphanRemoval = true)
	public Set<StaffPayrollAttributeStatistics> getStaffPayrollAttributeStatisticses() {
		return this.staffPayrollAttributeStatisticses;
	}

	public void setStaffPayrollAttributeStatisticses(
			Set<StaffPayrollAttributeStatistics> staffPayrollAttributeStatisticses) {
		this.staffPayrollAttributeStatisticses = staffPayrollAttributeStatisticses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "staffPayroll",cascade = CascadeType.ALL, orphanRemoval = true)
	public Set<StaffPayrollCategoryStatistics> getStaffPayrollCategoryStatisticses() {
		return this.staffPayrollCategoryStatisticses;
	}

	public void setStaffPayrollCategoryStatisticses(
			Set<StaffPayrollCategoryStatistics> staffPayrollCategoryStatisticses) {
		this.staffPayrollCategoryStatisticses = staffPayrollCategoryStatisticses;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "staffPayroll",cascade = CascadeType.ALL, orphanRemoval = true)
	public Set<StaffPayrollAdditional> getStaffPayrollAdditionals() {
		return this.staffPayrollAdditionals;
	}

	public void setStaffPayrollAdditionals(Set<StaffPayrollAdditional> staffPayrollAdditionals) {
		this.staffPayrollAdditionals = staffPayrollAdditionals;
	}
	
	@Column(name = "leave_pays", precision = 22, scale = 0)
	public Double getLeavePays() {
		return leavePays;
	}
	public void setLeavePays(Double leavePays) {
		this.leavePays = leavePays;
	}
	
	@Column(name = "final_salary", precision = 22, scale = 0)
	public Double getFinalSalary() {
		return finalSalary;
	}
	public void setFinalSalary(Double finalSalary) {
		this.finalSalary = finalSalary;
	}
	
	@Transient
	public Double getStandardSalary(){
		Double standardSalary=0d;
		String val=getStaffPayrollAttributeStatisticsValue(CommonConstant.PAYROLL_KEY_REF_STANDARD_SALARY);
		if(val !=null){
			 standardSalary=Double.valueOf(val);
		}
		return standardSalary;
	}
	
	@Transient
	public Double getGuaranteedMinimum(){
		Double gm=0d;
		String val=getStaffPayrollAttributeStatisticsValue(CommonConstant.PAYROLL_KEY_REF_GM);
		if(val !=null){
			gm=Double.valueOf(val);
		}
		return gm;
	}
	
	private String getStaffPayrollAttributeStatisticsValue(String keyRef){
		
		StaffPayrollAttributeStatistics spas=SpringUtil.getBean(StaffPayrollAttributeStatisticsServiceImpl.class)
				.getStaffPayrollAttributeStatisticsByKeyRefAndPayroll(keyRef,getId());
		String value=null;
		if(spas !=null){
			value=spas.getValue();
		}
		return value;
	}
	
	@Transient
	public List<StaffPayrollAdditional> getAdditionalsBfMpf(){
		List<StaffPayrollAdditional> additionalsBfMpf=new ArrayList<>();
		for(StaffPayrollAdditional addBf: getStaffPayrollAdditionals()){
			if(addBf.getType()!=null && addBf.getType().equals(CommonConstant.STAFF_PAYROLL_ADDITIONAL_TYPE_BEFORE_MPF)){
				additionalsBfMpf.add(addBf);
			}
		}
		return additionalsBfMpf;
	}
	
	@Transient
	public List<StaffPayrollAdditional> getAdditionalsAfMpf(){
		List<StaffPayrollAdditional> additionalsAfMpf=new ArrayList<>();
		for(StaffPayrollAdditional addAf: getStaffPayrollAdditionals()){
			if(addAf.getType()!=null && addAf.getType().equals(CommonConstant.STAFF_PAYROLL_ADDITIONAL_TYPE_AFTER_MPF)){
				additionalsAfMpf.add(addAf);
			}
		}
		return additionalsAfMpf;
	}
	
	@Transient
	public Double getTotalAdditionalBfMpf(){
		Double additional=0d;
		if(getAdditionalsBfMpf() !=null && getAdditionalsBfMpf().size()>0){
			for(StaffPayrollAdditional spa : getAdditionalsBfMpf()){
				if(StringUtils.isNotBlank(spa.getValue())){
					additional +=Double.parseDouble(spa.getValue());
				}
			}
		}
		return additional;
	}
	
	@Transient
	public Double getTotalAdditionalAfMpf(){
		Double additional=0d;
		if(getAdditionalsAfMpf() !=null && getAdditionalsAfMpf().size()>0){
			for(StaffPayrollAdditional spa : getAdditionalsAfMpf()){
				if(StringUtils.isNotBlank(spa.getValue())){
					additional +=Double.parseDouble(spa.getValue());
				}
			}
		}
		return additional;
	}
}
