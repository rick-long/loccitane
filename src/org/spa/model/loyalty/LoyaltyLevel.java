package org.spa.model.loyalty;
// Generated 2016-3-1 15:00:01 by Hibernate Tools 4.3.1.Final

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * LoyaltyLevel generated by hbm2java
 */
@Entity
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
@Table(name = "LOYALTY_LEVEL", catalog = "loccitane")
public class LoyaltyLevel implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Long id;
	private String name;
	private String reference;
	private Integer requiredSpaPoints;
	private Integer monthLimit;
	
	private Integer discountRequiredSpaPoints;
	private Integer discountMonthLimit;
	
	private Integer rank;
	private boolean isActive;
	private String remarks;
	
	private Date created;
	private String createdBy;
	private Date lastUpdated;
	private String lastUpdatedBy;
    private String oldId;
	private Set<UserLoyaltyLevel> userLoyaltyLevels = new HashSet<UserLoyaltyLevel>(0);

	public LoyaltyLevel() {
	}

	public LoyaltyLevel(String reference, boolean isActive) {
		this.reference = reference;
		this.isActive = isActive;
	}

	public LoyaltyLevel(String name, String reference, Integer requiredSpaPoints, Integer monthLimit, Integer rank,
			boolean isActive, Date created, String createdBy, Date lastUpdated, String lastUpdatedBy,
			Set<UserLoyaltyLevel> userLoyaltyLevels,String remarks,Integer discountRequiredSpaPoints,Integer discountMonthLimit) {
		this.name = name;
		this.reference = reference;
		this.requiredSpaPoints = requiredSpaPoints;
		this.monthLimit = monthLimit;
		this.rank = rank;
		this.isActive = isActive;
		this.created = created;
		this.createdBy = createdBy;
		this.lastUpdated = lastUpdated;
		this.lastUpdatedBy = lastUpdatedBy;
		this.userLoyaltyLevels = userLoyaltyLevels;
		this.remarks=remarks;
		this.discountMonthLimit=discountMonthLimit;
		this.discountRequiredSpaPoints=discountRequiredSpaPoints;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@Column(name = "name", length = 100)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "reference", nullable = false, length = 50)
	public String getReference() {
		return this.reference;
	}

	public void setReference(String reference) {
		this.reference = reference;
	}

	@Column(name = "required_spa_points")
	public Integer getRequiredSpaPoints() {
		return this.requiredSpaPoints;
	}

	public void setRequiredSpaPoints(Integer requiredSpaPoints) {
		this.requiredSpaPoints = requiredSpaPoints;
	}

	@Column(name = "discount_required_spa_points")
	public Integer getDiscountRequiredSpaPoints() {
		return discountRequiredSpaPoints;
	}
	public void setDiscountRequiredSpaPoints(Integer discountRequiredSpaPoints) {
		this.discountRequiredSpaPoints = discountRequiredSpaPoints;
	}
	
	@Column(name = "month_limit")
	public Integer getMonthLimit() {
		return this.monthLimit;
	}

	public void setMonthLimit(Integer monthLimit) {
		this.monthLimit = monthLimit;
	}

	@Column(name = "discount_month_limit")
	public Integer getDiscountMonthLimit() {
		return discountMonthLimit;
	}
	public void setDiscountMonthLimit(Integer discountMonthLimit) {
		this.discountMonthLimit = discountMonthLimit;
	}
	@Column(name = "rank")
	public Integer getRank() {
		return this.rank;
	}

	public void setRank(Integer rank) {
		this.rank = rank;
	}

	@Column(name = "is_active", nullable = false)
	public boolean isIsActive() {
		return this.isActive;
	}

	public void setIsActive(boolean isActive) {
		this.isActive = isActive;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", length = 19)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Column(name = "created_by", length = 100)
	public String getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_updated", length = 19)
	public Date getLastUpdated() {
		return this.lastUpdated;
	}

	public void setLastUpdated(Date lastUpdated) {
		this.lastUpdated = lastUpdated;
	}

	@Column(name = "last_updated_by", length = 100)
	public String getLastUpdatedBy() {
		return this.lastUpdatedBy;
	}

	public void setLastUpdatedBy(String lastUpdatedBy) {
		this.lastUpdatedBy = lastUpdatedBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "loyaltyLevel")
	public Set<UserLoyaltyLevel> getUserLoyaltyLevels() {
		return this.userLoyaltyLevels;
	}

	public void setUserLoyaltyLevels(Set<UserLoyaltyLevel> userLoyaltyLevels) {
		this.userLoyaltyLevels = userLoyaltyLevels;
	}
	
	@Column(name = "remarks", length = 255)
	public String getRemarks() {
		return remarks;
	}
	
	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}

    @Column(name = "old_id", length = 45)
    public String getOldId() {
        return this.oldId;
    }

    public void setOldId(String oldId) {
        this.oldId = oldId;
    }
}
