package org.spa.model.product;
// Generated 2016-3-31 15:50:45 by Hibernate Tools 4.3.1.Final

import com.spa.constant.CommonConstant;
import org.apache.commons.lang3.StringUtils;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.spa.model.awardRedemption.AwardRedemption;
import org.spa.model.awardRedemption.AwardRedemptionTransaction;
import org.spa.model.book.BookItem;
import org.spa.model.inventory.Inventory;
import org.spa.model.inventory.InventoryPurchaseItem;
import org.spa.model.order.PurchaseItem;
import org.spa.model.prepaid.PrepaidTopUpTransaction;
import org.spa.model.shop.Shop;
import org.spa.service.product.ProductOptionAttributeService;
import org.spa.serviceImpl.inventory.InventoryWarehouseServiceImpl;
import org.spa.serviceImpl.product.ProductOptionAttributeServiceImpl;
import org.spa.serviceImpl.product.ProductOptionSupernumeraryPriceServiceImpl;
import org.spa.utils.CollectionUtils;
import org.spa.utils.I18nUtil;
import org.spa.utils.SpringUtil;
import org.spa.utils.WebThreadLocal;
import org.spa.model.product.ProductOptionAttribute;

import javax.persistence.*;
import java.nio.file.Watchable;
import java.util.*;
import java.util.stream.Collectors;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * ProductOption generated by hbm2java
 */
@Entity
@org.hibernate.annotations.Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
@Table(name = "PRODUCT_OPTION", catalog = "loccitane")
public class ProductOption implements java.io.Serializable {

    /**
     * 
     */
    private static final long serialVersionUID = 1L;
    private Long id;
    private Product product;
    private String reference;
    private boolean isActive;
    private Date created;
    private String createdBy;
    private Date lastUpdated;
    private String lastUpdatedBy;
    private Set<ProductOptionAttribute> productOptionAttributes = new HashSet<ProductOptionAttribute>(0);
    private Set<InventoryPurchaseItem> inventoryPurchaseItems = new HashSet<InventoryPurchaseItem>(0);
    private Set<BookItem> bookItems = new HashSet<BookItem>(0);
    private Set<Inventory> inventories = new HashSet<Inventory>(0);
    private Set<ProductOptionSupernumeraryPrice> productOptionSupernumeraryPrices = new HashSet<ProductOptionSupernumeraryPrice>(0);
    private Set<PrepaidTopUpTransaction> prepaidTopUpTransactions = new HashSet<PrepaidTopUpTransaction>(0);
    private Set<PurchaseItem> purchaseItems = new HashSet<PurchaseItem>(0);
    private Set<AwardRedemption> awardRedemptions = new HashSet<AwardRedemption>(0);
    private Set<AwardRedemptionTransaction> awardRedemptionTransactions = new HashSet<AwardRedemptionTransaction>(0);

    private String oldId;
    private String barcode;
    
    public ProductOption() {
    }

    public ProductOption(Product product, String reference, boolean isActive) {
        this.product = product;
        this.reference = reference;
        this.isActive = isActive;
    }

    public ProductOption(Product product, String reference, boolean isActive, Date created, String createdBy,
            Date lastUpdated, String lastUpdatedBy, Set<ProductOptionAttribute> productOptionAttributes,
            Set<InventoryPurchaseItem> inventoryPurchaseItems, Set<BookItem> bookItems,String oldId,
            Set<Inventory> inventories,Set<ProductOptionSupernumeraryPrice> productOptionSupernumeraryPrices,
            Set<PrepaidTopUpTransaction> prepaidTopUpTransactions,Set<PurchaseItem> purchaseItems,Set<AwardRedemption> awardRedemptions,
            Set<AwardRedemptionTransaction> awardRedemptionTransactions) {
        this.product = product;
        this.reference = reference;
        this.isActive = isActive;
        this.created = created;
        this.createdBy = createdBy;
        this.lastUpdated = lastUpdated;
        this.lastUpdatedBy = lastUpdatedBy;
        this.productOptionAttributes = productOptionAttributes;
        this.inventoryPurchaseItems = inventoryPurchaseItems;
        this.bookItems = bookItems;
        this.inventories = inventories;
        this.productOptionSupernumeraryPrices = productOptionSupernumeraryPrices;
        this.prepaidTopUpTransactions = prepaidTopUpTransactions;
        this.purchaseItems=purchaseItems;
        this.awardRedemptions=awardRedemptions;
        this.awardRedemptionTransactions=awardRedemptionTransactions;
        this.oldId=oldId;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "id", unique = true, nullable = false)
    public Long getId() {
        return this.id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "product_id", nullable = false)
    public Product getProduct() {
        return this.product;
    }

    public void setProduct(Product product) {
        this.product = product;
    }

    @Column(name = "reference", nullable = false, length = 50)
    public String getReference() {
        return this.reference;
    }

    public void setReference(String reference) {
        this.reference = reference;
    }

    @Column(name = "is_active", nullable = false)
    public boolean isIsActive() {
        return this.isActive;
    }

    public void setIsActive(boolean isActive) {
        this.isActive = isActive;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "created", length = 19)
    public Date getCreated() {
        return this.created;
    }

    public void setCreated(Date created) {
        this.created = created;
    }

    @Column(name = "created_by", length = 100)
    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "last_updated", length = 19)
    public Date getLastUpdated() {
        return this.lastUpdated;
    }

    public void setLastUpdated(Date lastUpdated) {
        this.lastUpdated = lastUpdated;
    }

    @Column(name = "last_updated_by", length = 100)
    public String getLastUpdatedBy() {
        return this.lastUpdatedBy;
    }

    public void setLastUpdatedBy(String lastUpdatedBy) {
        this.lastUpdatedBy = lastUpdatedBy;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "productOption",cascade = {CascadeType.ALL},orphanRemoval=true)
    public Set<ProductOptionAttribute> getProductOptionAttributes() {
        return this.productOptionAttributes;
    }

    public void setProductOptionAttributes(Set<ProductOptionAttribute> productOptionAttributes) {
        this.productOptionAttributes = productOptionAttributes;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "productOption")
    public Set<InventoryPurchaseItem> getInventoryPurchaseItems() {
        return this.inventoryPurchaseItems;
    }

    public void setInventoryPurchaseItems(Set<InventoryPurchaseItem> inventoryPurchaseItems) {
        this.inventoryPurchaseItems = inventoryPurchaseItems;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "productOption")
    public Set<BookItem> getBookItems() {
        return this.bookItems;
    }

    public void setBookItems(Set<BookItem> bookItems) {
        this.bookItems = bookItems;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "productOption")
    public Set<Inventory> getInventories() {
        return this.inventories;
    }

    public void setInventories(Set<Inventory> inventories) {
        this.inventories = inventories;
    }
    
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "productOption")
    public Set<ProductOptionSupernumeraryPrice> getProductOptionSupernumeraryPrices() {
        return this.productOptionSupernumeraryPrices;
    }

    public void setProductOptionSupernumeraryPrices(
            Set<ProductOptionSupernumeraryPrice> productOptionSupernumeraryPrices) {
        this.productOptionSupernumeraryPrices = productOptionSupernumeraryPrices;
    }
    
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "productOption")
	public Set<AwardRedemption> getAwardRedemptions() {
		return this.awardRedemptions;
	}

	public void setAwardRedemptions(Set<AwardRedemption> awardRedemptions) {
		this.awardRedemptions = awardRedemptions;
	}
	
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "productOption")
	public Set<PrepaidTopUpTransaction> getPrepaidTopUpTransactions() {
		return prepaidTopUpTransactions;
	}
    
    public void setPrepaidTopUpTransactions(Set<PrepaidTopUpTransaction> prepaidTopUpTransactions) {
		this.prepaidTopUpTransactions = prepaidTopUpTransactions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "productOption")
	public Set<PurchaseItem> getPurchaseItems() {
		return this.purchaseItems;
	}

	public void setPurchaseItems(Set<PurchaseItem> purchaseItems) {
		this.purchaseItems = purchaseItems;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "redeemGoods")
	public Set<AwardRedemptionTransaction> getAwardRedemptionTransactions() {
		return this.awardRedemptionTransactions;
	}

	public void setAwardRedemptionTransactions(Set<AwardRedemptionTransaction> awardRedemptionTransactions) {
		this.awardRedemptionTransactions = awardRedemptionTransactions;
	}
	
	@Column(name = "old_id", length = 45)
	public String getOldId() {
		return oldId;
	}
	public void setOldId(String oldId) {
		this.oldId = oldId;
	}

    @Basic
    @Column(name = "barcode", nullable = true, length = 32)
    public String getBarcode() {
        return barcode;
    }

    public void setBarcode(String barcode) {
        this.barcode = barcode;
    }
	
	// 显示的productOption属性值
    @Transient
    public String getOptionValues() {
        StringBuilder sb = new StringBuilder();
        Set<ProductOptionAttribute> attributes = getProductOptionAttributes();
        List<ProductOptionAttribute> attrList =new ArrayList<ProductOptionAttribute>();
        attrList.addAll(attributes);
        CollectionUtils.sort(attrList, "productOptionKey.name", true);
        if(attrList !=null && attrList.size()>0){
            int i =0;
	        for(ProductOptionAttribute attribute : attrList) {
	            i++;
        		if(!attribute.getProductOptionKey().getLabelShow()){
            		continue;
            	}
                // 显示duration
                if(StringUtils.isNotBlank(attribute.getValue()) && !CommonConstant.PRODUCT_OPTION_KEY_REF_PRICE.equals(attribute.getProductOptionKey().getReference())
                		) {
//                    Integer duration = Integer.parseInt(attribute.getValue());
                	
                    sb.append(attribute.getValue()).append(attribute.getProductOptionKey().getUnit() !=null ? I18nUtil.getMessageKey("label.unit."+attribute.getProductOptionKey().getUnit()) : "");
                    if( i < attrList.size()){
                        sb.append(" / ");
                    }
                }
            }
        }

        return sb.toString().trim();
    }
    
    @Transient
    public String getOptionValuesAddPrice() {
        StringBuilder sb = new StringBuilder();
        Set<ProductOptionAttribute> attributes = getProductOptionAttributes();
        List<ProductOptionAttribute> attrList =new ArrayList<ProductOptionAttribute>();
        attrList.addAll(attributes);
        CollectionUtils.sort(attrList, "productOptionKey.name", true);
        if(attrList !=null && attrList.size()>0){
            int i = 0;
	        for(ProductOptionAttribute attribute : attrList) {
	            i++;
	            // 显示duration
	            if(StringUtils.isNotBlank(attribute.getValue())) {
	            	if(!attribute.getProductOptionKey().getLabelShow()){
	            		continue;
	            	}
	            	if(CommonConstant.PRODUCT_OPTION_KEY_REF_PRICE.equals(attribute.getProductOptionKey().getReference())){
	            		sb.append(attribute.getProductOptionKey().getUnit() !=null ? I18nUtil.getMessageKey("label.currency.default") : "").append(attribute.getValue());
	            	}else{
	            		sb.append(attribute.getValue()).append(attribute.getProductOptionKey().getUnit() !=null ? I18nUtil.getMessageKey("label.unit."+attribute.getProductOptionKey().getUnit()) : "");
	            	}
                    if( i < attrList.size()){
                        sb.append(" / ");
                    }
	            }
	        }
        }
        return sb.toString().trim();
   /*     return sb.toString().trim();*/
    }
    @Transient
    public String getOptionValuesAddPrice66() {
        StringBuilder sb = new StringBuilder();
        Set<ProductOptionAttribute> attributes = getProductOptionAttributes();
        List<ProductOptionAttribute> attrList =new ArrayList<ProductOptionAttribute>();
        attrList.addAll(attributes);
        CollectionUtils.sort(attrList, "productOptionKey.name", true);
        if(attrList !=null && attrList.size()>0){
            int i =0;
	        for(ProductOptionAttribute attribute : attrList) {
	            i++;
                // 显示duration
                if(StringUtils.isNotBlank(attribute.getValue())) {
                    if(!attribute.getProductOptionKey().getLabelShow()){
                        continue;
                    }
                    if(CommonConstant.PRODUCT_OPTION_KEY_REF_PRICE.equals(attribute.getProductOptionKey().getReference())){
                        sb.append(I18nUtil.getMessageKey("label.price")).append(": ").
                        append(I18nUtil.getMessageKey("label.currency.default")).append(attribute.getValue());
                    }else if (CommonConstant.PRODUCT_OPTION_KEY_DURATION_REF.equals(attribute.getProductOptionKey().getReference())){
                        sb.append(I18nUtil.getMessageKey("label.time")).append(": ").append(attribute.getValue()).
                        append(I18nUtil.getMessageKey("label.unit.mins"));
                    }
                    if( i < attrList.size()){
                        sb.append(" / ");
                    }
                }
            }
        }
        return sb.toString().trim();
    }

    @Transient
    public String getAllOptionValues() {
        StringBuilder sb = new StringBuilder();
        Set<ProductOptionAttribute> attributes = getProductOptionAttributes();
        List<ProductOptionAttribute> attrList =new ArrayList<ProductOptionAttribute>();
        attrList.addAll(attributes);
        CollectionUtils.sort(attrList, "productOptionKey.name", true);
        if(attrList !=null && attrList.size()>0){
            int i =0;
	        for(ProductOptionAttribute attribute : attrList) {
	            i++;
	            // 显示duration
	            if(StringUtils.isNotBlank(attribute.getValue())) {

	                if ("barcode".equalsIgnoreCase(attribute.getProductOptionKey().getReference())) {
                        attribute.setValue(attribute.getValue().replace(attribute.getValue(), ""));
                    }

                    if (attribute.getProductOptionKey().getUnit() != null) {
                        if(attribute.getProductOptionKey().getUnit().endsWith("currency")){
                            sb.append(attribute.getProductOptionKey().getUnit() !=null ? I18nUtil.getMessageKey("label.currency.default") : "").append(attribute.getValue());
                        }else{
                            sb.append(attribute.getValue()).append(attribute.getProductOptionKey().getUnit() !=null ? I18nUtil.getMessageKey("label.unit."+attribute.getProductOptionKey().getUnit()) : "");
                        }
                        if( i < attrList.size()){
                            sb.append(" / ");
                        }
                    }
	            }
	        }
        }
        return sb.toString().trim();
    }

    // categoryFullName>ProductName>product option key values
    @Transient
    public String getLabel2() {
        return getProduct().getFullName() + " " + getOptionValues();
    }
   
    // 显示product名字和productOption属性值
    @Transient
    public String getLabel3() {
        return getProduct().getName() + "<br/>(" + getOptionValuesAddPrice() + ")";
    }
    @Transient
    public String getLabe66() {
        return getProduct().getName() + "<br/>(" + getOptionValuesAddPrice66() + ")";
    }
    @Transient
    public String getLabel33() {
        return getProduct().getName() + " (" + getOptionValuesAddPrice() + ")";
    }

    /* create by william -- 2018-9-25 */
    @Transient
    public String getLabelWithCode() {
        if (!getProduct().getProdType().equalsIgnoreCase(CommonConstant.CATEGORY_REF_GOODS)) {
            return getLabel3();
        } else {
            return getCode() + "<br/>(" + getProduct().getName() +" / "+ getOptionValuesAddPrice() + ")";
        }
    }

    @Transient
    public String getLabelWithCodeNoBr() {
        if (!getProduct().getProdType().equalsIgnoreCase(CommonConstant.CATEGORY_REF_GOODS)) {
            return getLabel33();
        } else {
            return getCode() + " (" + getProduct().getName() +" / "+ getOptionValuesAddPrice() + ")";
        }
    }

    @Transient
    public String getLabel4() {
        return getOptionValuesAddPrice();
    }
    // categoryFullName Except ProdType>ProductName>product option key values
    @Transient
    public String getLabel6() {
        return getProduct().getCategory().getFullNameExceptProdType() + " > " + getProduct().getName() + " " + getOptionValues();
    }
    /**
     * product name + option value and price
     * @return
     */
    @Transient
    public String getLabel5() {
        return getProduct().getName() + " (" + getOptionValuesAddPrice() + ")";
    }


    @Transient
    public ProductOptionAttribute getAttribute(String keyName) {
        List<ProductOptionAttribute> attributes = getProductOptionAttributes().stream().filter(item -> keyName.equalsIgnoreCase(item.getProductOptionKey().getName())).collect(Collectors.toList());
        if (attributes.size() > 0) {
            return attributes.get(0);
        }
        return null;
    }

    @Transient
    public Integer getDuration() {
        ProductOptionAttributeServiceImpl poas = SpringUtil.getBean(ProductOptionAttributeServiceImpl.class);
        ProductOptionAttribute attribute = poas.getPOAttrByPoIdAndKeyRefAndCompany(id, CommonConstant.PRODUCT_OPTION_KEY_DURATION_REF, product.getCompany().getId());
        if (attribute != null) {
            return Integer.parseInt(attribute.getValue());
        }
        return null;
    }

    @Transient
    public Double getFinalPrice(Long shopId) {
        Double price=getOriginalPrice();
        ProductOptionSupernumeraryPriceServiceImpl posps=SpringUtil.getBean(ProductOptionSupernumeraryPriceServiceImpl.class);
        ProductOptionSupernumeraryPrice posp=posps.getProductOptionSupernumeraryPriceByShopAndPO(id, shopId);
        if(posp !=null){
        	price +=posp.getAdditionalPrice().doubleValue();
        }
        return price;
    }
    
    @Transient
    public Double getOriginalPrice() {
        ProductOptionAttributeServiceImpl poas = SpringUtil.getBean(ProductOptionAttributeServiceImpl.class);
        ProductOptionAttribute attribute = poas.getPOAttrByPoIdAndKeyRefAndCompany(id, CommonConstant.PRODUCT_OPTION_KEY_PRICE_REF, product.getCompany().getId());
        if (attribute != null) {
            return Double.parseDouble(attribute.getValue());
        }
        //price 不能为空
        return 0d;
    }
    @Transient
    public Double getCostOfProduct() {
        ProductOptionAttributeServiceImpl poas = SpringUtil.getBean(ProductOptionAttributeServiceImpl.class);
        ProductOptionAttribute attribute = poas.getPOAttrByPoIdAndKeyRefAndCompany(id, CommonConstant.PRODUCT_OPTION_KEY_COST_REF, product.getCompany().getId());
        if (attribute != null) {
            return Double.parseDouble(attribute.getValue());
        }
        //price 不能为空
        return 0d;
    }
    @Transient
    public Integer getProcessTime() {
        ProductOptionAttributeServiceImpl poas = SpringUtil.getBean(ProductOptionAttributeServiceImpl.class);
        ProductOptionAttribute attribute = poas.getPOAttrByPoIdAndKeyRefAndCompany(id, CommonConstant.PRODUCT_OPTION_KEY_PROCESS_TIME_REF, product.getCompany().getId());
        if (attribute != null) {
            return Integer.parseInt(attribute.getValue());
        }
        return 0;
    }

    @Transient
    public List<ProductOptionSupernumeraryPrice> getStaffProductOptionSupernumeraryPrices() {
        ProductOptionSupernumeraryPriceServiceImpl posp = SpringUtil.getBean(ProductOptionSupernumeraryPriceServiceImpl.class);
       List<Long>ShopIds=new ArrayList<Long>();
        for (Shop shop:WebThreadLocal.getUser().getStaffHomeShops()){
            ShopIds.add(shop.getId());
        }
        List<ProductOptionSupernumeraryPrice> productOptionSupernumeraryPrices = posp.getProductOptionSupernumeraryPrices(id, ShopIds);

        return productOptionSupernumeraryPrices ;
    }

    /**
     * 获取treatment的容量
     *
     * @return
     */
    @Transient
    public Integer getCapacity() {
        ProductOptionAttributeServiceImpl poas = SpringUtil.getBean(ProductOptionAttributeServiceImpl.class);
        ProductOptionAttribute attribute = poas.getPOAttrByPoIdAndKeyRefAndCompany(id, CommonConstant.PRODUCT_OPTION_KEY_CAPACITY_REF, product.getCompany().getId());
        if (attribute != null && StringUtils.isNotBlank(attribute.getValue())) {
            try {
                return Integer.parseInt(attribute.getValue().trim());
            } catch (Exception e) {
                e.printStackTrace();
                return 1; // 解释失败，返回1
            }
        }
        return 1; // 默认返回1
    }


    @Transient
    public String getProductType() {
        return getProduct().getProdType();
    }
    
    @Transient
    public Integer getInventoryQtyByShop(Long shopId){
    	InventoryWarehouseServiceImpl iwsi = SpringUtil.getBean(InventoryWarehouseServiceImpl.class);
    	Integer qty=iwsi.getProductOptionQtyByShop(getId(), shopId);
    	return qty;
    }
    
    @Transient
    public Boolean getIsGoods(){
    	Boolean isGoods=false;
    	if(getProductType().equals("CA-GOODS")){
    		isGoods=true;
    	}
    	return isGoods;
    }

    @Transient
    public String getAdditionalPrice() {
        for(ProductOptionSupernumeraryPrice productOptionSupernumeraryPrice:productOptionSupernumeraryPrices){
            productOptionSupernumeraryPrice.getShop().getName();


        }

        return getProduct().getName() + "<br/>(" + getOptionValuesAddPrice() + ")";
    }
    @Transient
    public String getPrice() {
        return getOptionPrice();
    }
    @Transient
    public String getMins(){
        return getOptionValueMins();
    }
    
    @Transient
    public String getOptionPrice() {
        String price="";
        Set<ProductOptionAttribute> attributes = getProductOptionAttributes();
        if(attributes !=null && attributes.size()>0){
            for(ProductOptionAttribute attribute : attributes) {
                // 显示duration
                if(StringUtils.isNotBlank(attribute.getValue())) {
                    if(!attribute.getProductOptionKey().getLabelShow()){
                        continue;
                    }
                    if(CommonConstant.PRODUCT_OPTION_KEY_REF_PRICE.equals(attribute.getProductOptionKey().getReference())){
                        price=CommonConstant.CURRENCY_TYPE+attribute.getValue();
                    }
                }
            }
        }
        return price;
    }

    @Transient
    public String getOptionValueMins() {
        String mins="";
        Set<ProductOptionAttribute> attributes = getProductOptionAttributes();
        if(attributes !=null && attributes.size()>0){
            for(ProductOptionAttribute attribute : attributes) {
                // 显示duration
                if(StringUtils.isNotBlank(attribute.getValue())) {
                    if(!attribute.getProductOptionKey().getLabelShow()){
                        continue;
                    }
                    if(CommonConstant.PRODUCT_OPTION_KEY_DURATION_REF.equals(attribute.getProductOptionKey().getReference())){
                        mins=attribute.getValue()+CommonConstant.TIME_TO_TYPE;
                    }
                }
            }
        }
        return mins;
    }
    @Transient
    public Double getValuePrice() {
        return getOptionValuePrice();
    }
    
    @Transient
    public Double getOptionValuePrice() {
        Double price=0.0;
        Set<ProductOptionAttribute> attributes = getProductOptionAttributes();
        if(attributes !=null && attributes.size()>0){
            for(ProductOptionAttribute attribute : attributes) {
                // 显示duration
                if(StringUtils.isNotBlank(attribute.getValue())) {
                    if(!attribute.getProductOptionKey().getLabelShow()){
                        continue;
                    }
                    if(CommonConstant.PRODUCT_OPTION_KEY_REF_PRICE.equals(attribute.getProductOptionKey().getReference())){
                        price=Double.valueOf(attribute.getValue());
                    }
                }
            }
        }
        return price;
    }

    @Transient
    public String getCode() {
        ProductOptionAttributeServiceImpl poas = SpringUtil.getBean(ProductOptionAttributeServiceImpl.class);
        ProductOptionAttribute attribute = poas.getPOAttrByPoIdAndKeyRefAndCompany(id, CommonConstant.PRODUCT_OPTION_KEY_REF_CODE, product.getCompany().getId());
        if (attribute != null) {
            return attribute.getValue();
        }
        return "";
    }
}
