package org.spa.model.product;
// Generated 2016-3-31 15:50:45 by Hibernate Tools 4.3.1.Final

import com.spa.constant.CommonConstant;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.spa.model.bonus.BonusRule;
import org.spa.model.commission.CommissionRule;
import org.spa.model.company.Company;
import org.spa.model.prepaid.PrepaidTopUpTransaction;
import org.spa.model.shop.RoomTreatments;
import org.spa.model.staff.StaffTreatments;

import javax.persistence.*;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import static javax.persistence.GenerationType.IDENTITY;

//import org.spa.model.payroll.StaffPayrollCategoryStatistics;

/**
 * Category generated by hbm2java
 */
@Entity
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
@Table(name = "CATEGORY", catalog = "loccitane")
public class Category implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Long id;
	private Category category;//parent category
	private Company company;
	private String reference;
	private String name;
	private String displayOrder;
	private String remarks;
	private boolean isActive;
	private Date created;
	private String createdBy;
	private Date lastUpdated;
	private String lastUpdatedBy;
	private Set<Product> products = new HashSet<Product>(0);
	private Set<RoomTreatments> roomTreatmentses = new HashSet<RoomTreatments>(0);
	private Set<Category> categories = new HashSet<Category>(0);
	private Set<ProductDescriptionKey> productDescriptionKeys = new HashSet<ProductDescriptionKey>(0);
	private Set<ProductOptionKey> productOptionKeys = new HashSet<ProductOptionKey>(0);
	private Set<PrepaidTopUpTransaction> prepaidTopUpTransactions = new HashSet<PrepaidTopUpTransaction>(0);
//	private Set<StaffPayrollCategoryStatistics> staffPayrollCategoryStatisticses = new HashSet<StaffPayrollCategoryStatistics>(0);
	private Set<CommissionRule> commissionRules = new HashSet<CommissionRule>(0);
	private Set<StaffTreatments> staffTreatmentses = new HashSet<StaffTreatments>(0);
	
	private Set<BonusRule> bonusRules = new HashSet<BonusRule>(0);
	
	private String oldId;
	
	public Category() {
	}

	public Category(String reference, boolean isActive) {
		this.reference = reference;
		this.isActive = isActive;
	}

	public Category(Category category, Company company, String reference, String name, String displayOrder,
			String remarks, boolean isActive, Date created, String createdBy, Date lastUpdated, String lastUpdatedBy,
			Set<Product> products, Set<RoomTreatments> roomTreatmentses, Set<Category> categories,String oldId,
			Set<ProductDescriptionKey> productDescriptionKeys, Set<ProductOptionKey> productOptionKeys,
			Set<PrepaidTopUpTransaction> prepaidTopUpTransactions,Set<StaffTreatments> staffTreatmentses,Set<BonusRule> bonusRules,
//			Set<StaffPayrollCategoryStatistics> staffPayrollCategoryStatisticses,
			Set<CommissionRule> commissionRules) {
		this.category = category;
		this.company = company;
		this.reference = reference;
		this.name = name;
		this.displayOrder = displayOrder;
		this.remarks = remarks;
		this.isActive = isActive;
		this.created = created;
		this.createdBy = createdBy;
		this.lastUpdated = lastUpdated;
		this.lastUpdatedBy = lastUpdatedBy;
		this.products = products;
		this.roomTreatmentses = roomTreatmentses;
		this.categories = categories;
		this.productDescriptionKeys = productDescriptionKeys;
		this.productOptionKeys = productOptionKeys;
		this.prepaidTopUpTransactions = prepaidTopUpTransactions;
//		this.staffPayrollCategoryStatisticses=staffPayrollCategoryStatisticses;
		this.commissionRules=commissionRules;
		this.staffTreatmentses=staffTreatmentses;
		this.bonusRules=bonusRules;
		this.oldId=oldId;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "parent_id")
	public Category getCategory() {
		return this.category;
	}

	public void setCategory(Category category) {
		this.category = category;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "company_id")
	public Company getCompany() {
		return this.company;
	}

	public void setCompany(Company company) {
		this.company = company;
	}

	@Column(name = "reference", nullable = false, length = 50)
	public String getReference() {
		return this.reference;
	}

	public void setReference(String reference) {
		this.reference = reference;
	}

	@Column(name = "name", length = 100)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "display_order", length = 20)
	public String getDisplayOrder() {
		return this.displayOrder;
	}

	public void setDisplayOrder(String displayOrder) {
		this.displayOrder = displayOrder;
	}

	@Column(name = "remarks")
	public String getRemarks() {
		return this.remarks;
	}

	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}

	@Column(name = "is_active", nullable = false)
	public boolean isIsActive() {
		return this.isActive;
	}

	public void setIsActive(boolean isActive) {
		this.isActive = isActive;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", length = 19)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Column(name = "created_by", length = 100)
	public String getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_updated", length = 19)
	public Date getLastUpdated() {
		return this.lastUpdated;
	}

	public void setLastUpdated(Date lastUpdated) {
		this.lastUpdated = lastUpdated;
	}

	@Column(name = "last_updated_by", length = 100)
	public String getLastUpdatedBy() {
		return this.lastUpdatedBy;
	}

	public void setLastUpdatedBy(String lastUpdatedBy) {
		this.lastUpdatedBy = lastUpdatedBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "category")
	public Set<Product> getProducts() {
		return this.products;
	}

	public void setProducts(Set<Product> products) {
		this.products = products;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "category")
	public Set<RoomTreatments> getRoomTreatmentses() {
		return this.roomTreatmentses;
	}

	public void setRoomTreatmentses(Set<RoomTreatments> roomTreatmentses) {
		this.roomTreatmentses = roomTreatmentses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "category")
	public Set<Category> getCategories() {
		return this.categories;
	}

	public void setCategories(Set<Category> categories) {
		this.categories = categories;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "product_description_key_category", catalog = "loccitane", joinColumns = {
			@JoinColumn(name = "category_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "product_description_key_id", nullable = false, updatable = false) })
	public Set<ProductDescriptionKey> getProductDescriptionKeys() {
		return this.productDescriptionKeys;
	}

	public void setProductDescriptionKeys(Set<ProductDescriptionKey> productDescriptionKeys) {
		this.productDescriptionKeys = productDescriptionKeys;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "category")
	public Set<StaffTreatments> getStaffTreatmentses() {
		return this.staffTreatmentses;
	}

	public void setStaffTreatmentses(Set<StaffTreatments> staffTreatmentses) {
		this.staffTreatmentses = staffTreatmentses;
	}
	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "product_option_key_category", catalog = "loccitane", joinColumns = {
			@JoinColumn(name = "category_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "product_option_key_id", nullable = false, updatable = false) })
	public Set<ProductOptionKey> getProductOptionKeys() {
		return this.productOptionKeys;
	}

	public void setProductOptionKeys(Set<ProductOptionKey> productOptionKeys) {
		this.productOptionKeys = productOptionKeys;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "category")
	public Set<PrepaidTopUpTransaction> getPrepaidTopUpTransactions() {
		return prepaidTopUpTransactions;
	}
	
	public void setPrepaidTopUpTransactions(Set<PrepaidTopUpTransaction> prepaidTopUpTransactions) {
		this.prepaidTopUpTransactions = prepaidTopUpTransactions;
	}

//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "category")
//	public Set<StaffPayrollCategoryStatistics> getStaffPayrollCategoryStatisticses() {
//		return this.staffPayrollCategoryStatisticses;
//	}
//
//	public void setStaffPayrollCategoryStatisticses(
//			Set<StaffPayrollCategoryStatistics> staffPayrollCategoryStatisticses) {
//		this.staffPayrollCategoryStatisticses = staffPayrollCategoryStatisticses;
//	}
	
	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "commission_rule_category", catalog = "loccitane", joinColumns = {
			@JoinColumn(name = "category_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "commission_rule_id", nullable = false, updatable = false) })
	public Set<CommissionRule> getCommissionRules() {
		return this.commissionRules;
	}

	public void setCommissionRules(Set<CommissionRule> commissionRules) {
		this.commissionRules = commissionRules;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "bonus_rule_category", catalog = "loccitane", joinColumns = {
			@JoinColumn(name = "category_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "bonus_rule_id", nullable = false, updatable = false) })
	public Set<BonusRule> getBonusRules() {
		return bonusRules;
	}
	public void setBonusRules(Set<BonusRule> bonusRules) {
		this.bonusRules = bonusRules;
	}
	
	@Column(name = "old_id", length = 100)
	public String getOldId() {
		return oldId;
	}
	public void setOldId(String oldId) {
		this.oldId = oldId;
	}
	
    @Transient
    public String getFullName() {
        StringBuilder sb = new StringBuilder(getName());
        Category parent = category;
        while (parent != null && !parent.getReference().equals(CommonConstant.CATEGORY_REF_ROOT)) {
			sb.insert(0, parent.getName() + " > ");
			parent = parent.getCategory();
        }
		return sb.toString();
    }
    @Transient
    public String getFullNameExceptProdType() {
        StringBuilder sb = new StringBuilder(getName());
        Category parent = category;
        while (parent != null && !parent.getReference().equals(CommonConstant.CATEGORY_REF_ROOT) && !parent.getCategory().getReference().equals(CommonConstant.CATEGORY_REF_ROOT)) {
			sb.insert(0, parent.getName() + " > ");
			parent = parent.getCategory();
        }
		return sb.toString();
    }
    @Transient
    public List<Product> getSortedProducts() {
        return products.stream().filter(Product::isIsActive).sorted((e1, e2)->e1.getName().compareTo(e2.getName())).collect(Collectors.toList());
    }

    @Transient
    public List<Category> getSortedChilden() {
        return categories.stream().filter(Category::isIsActive).sorted((e1, e2)->e1.getName().compareTo(e2.getName())).collect(Collectors.toList());
    }
    
    @Transient
    public Category getTheTopestCategoryUnderRoot() {
    	Category parent = category;
        while (parent != null) {
            if(parent.getCategory() !=null && parent.getCategory().getReference().equals(CommonConstant.CATEGORY_REF_ROOT)) {
            	return parent;
            }else{
            	parent=parent.getCategory();
            }
        }
        return parent;
    }
}
