package org.spa.model.product;
// Generated 2016-3-31 15:50:45 by Hibernate Tools 4.3.1.Final

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.spa.model.commission.CommissionRule;
import org.spa.model.company.Company;
import org.spa.model.shop.RoomTreatments;
import org.spa.model.shop.Shop;
import org.spa.model.staff.StaffTreatments;

import com.spa.constant.CommonConstant;

/**
 * Product generated by hbm2java
 */
@Entity
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
@Table(name = "PRODUCT", catalog = "loccitane")
public class Product implements java.io.Serializable {

    /**
     *
     */
    private static final long serialVersionUID = 1L;
    private Long id;
    private Brand brand;
    private Category category;
    private Company company;

    private String reference;
    private String name;
    private boolean isActive;
    private Date created;
    private String createdBy;
    private Date lastUpdated;
    private String lastUpdatedBy;
    private Set<RoomTreatments> roomTreatmentses = new HashSet<RoomTreatments>(0);
    private Set<ProductOption> productOptions = new HashSet<ProductOption>(0);
    private Set<ProductDescription> productDescriptions = new HashSet<ProductDescription>(0);
    private Set<StaffTreatments> staffTreatmentses = new HashSet<StaffTreatments>(0);
    private Set<CommissionRule> commissionRules = new HashSet<>(0);
    private Set<Supplier> suppliers = new HashSet<Supplier>(0);
    private Set<Shop> shops = new HashSet<Shop>(0);
    private String oldId;
    private String prodType;
    private boolean showOnApps;


    public Product() {
    }

    public Product(Brand brand, Category category, String reference, boolean isActive) {
        this.brand = brand;
        this.category = category;
        this.reference = reference;
        this.isActive = isActive;
    }

    public Product(Brand brand, Category category, Company company, Set<Supplier> suppliers, String reference, String name,
                   boolean isActive, Date created, String createdBy, Date lastUpdated, String lastUpdatedBy, String oldId,
                   Set<RoomTreatments> roomTreatmentses, Set<ProductOption> productOptions, Set<StaffTreatments> staffTreatmentses,
                   Set<ProductDescription> productDescriptions, String prodType, boolean showOnApps, Set<Shop> shops) {
        this.brand = brand;
        this.category = category;
        this.company = company;
        this.suppliers = suppliers;
        this.reference = reference;
        this.name = name;
        this.isActive = isActive;
        this.created = created;
        this.createdBy = createdBy;
        this.lastUpdated = lastUpdated;
        this.lastUpdatedBy = lastUpdatedBy;
        this.roomTreatmentses = roomTreatmentses;
        this.productOptions = productOptions;
        this.productDescriptions = productDescriptions;
        this.staffTreatmentses = staffTreatmentses;
        this.oldId = oldId;
        this.prodType = prodType;
        this.showOnApps = showOnApps;
        this.shops = shops;

    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "id", unique = true, nullable = false)
    public Long getId() {
        return this.id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "brand_id", nullable = false)
    public Brand getBrand() {
        return this.brand;
    }

    public void setBrand(Brand brand) {
        this.brand = brand;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "product")
    public Set<StaffTreatments> getStaffTreatmentses() {
        return this.staffTreatmentses;
    }

    public void setStaffTreatmentses(Set<StaffTreatments> staffTreatmentses) {
        this.staffTreatmentses = staffTreatmentses;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "category_id", nullable = false)
    public Category getCategory() {
        return this.category;
    }

    public void setCategory(Category category) {
        this.category = category;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "company_id")
    public Company getCompany() {
        return this.company;
    }

    public void setCompany(Company company) {
        this.company = company;
    }

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "supplier_product", catalog = "loccitane", joinColumns = {
            @JoinColumn(name = "product_id", nullable = false, updatable = false)}, inverseJoinColumns = {
            @JoinColumn(name = "supplier_id", nullable = false, updatable = false)})
    public Set<Supplier> getSuppliers() {
        return suppliers;
    }

    public void setSuppliers(Set<Supplier> suppliers) {
        this.suppliers = suppliers;
    }

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "COMMISSION_RULE_PRODUCT", catalog = "loccitane",
            joinColumns = { @JoinColumn(name = "product_id", nullable = false, updatable = false) },
            inverseJoinColumns = { @JoinColumn(name = "commission_rule_id", nullable = false, updatable = false) })
    public Set<CommissionRule> getCommissionRules() {
        return commissionRules;
    }

    public void setCommissionRules(Set<CommissionRule> commissionRules) {
        this.commissionRules = commissionRules;
    }

    public void setActive(boolean isActive) {
        this.isActive = isActive;
    }

    @Column(name = "reference", nullable = false, length = 50)
    public String getReference() {
        return this.reference;
    }

    public void setReference(String reference) {
        this.reference = reference;
    }

    @Column(name = "prod_type", length = 50)
    public String getProdType() {
        return prodType;
    }

    public void setProdType(String prodType) {
        this.prodType = prodType;
    }

    @Column(name = "name", length = 100)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Column(name = "is_active", nullable = false)
    public boolean isIsActive() {
        return this.isActive;
    }

    public void setIsActive(boolean isActive) {
        this.isActive = isActive;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "created", length = 19)
    public Date getCreated() {
        return this.created;
    }

    public void setCreated(Date created) {
        this.created = created;
    }

    @Column(name = "created_by", length = 100)
    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "last_updated", length = 19)
    public Date getLastUpdated() {
        return this.lastUpdated;
    }

    public void setLastUpdated(Date lastUpdated) {
        this.lastUpdated = lastUpdated;
    }

    @Column(name = "last_updated_by", length = 100)
    public String getLastUpdatedBy() {
        return this.lastUpdatedBy;
    }

    public void setLastUpdatedBy(String lastUpdatedBy) {
        this.lastUpdatedBy = lastUpdatedBy;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "product")
    public Set<RoomTreatments> getRoomTreatmentses() {
        return this.roomTreatmentses;
    }

    public void setRoomTreatmentses(Set<RoomTreatments> roomTreatmentses) {
        this.roomTreatmentses = roomTreatmentses;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "product")
    @OrderBy(value = "id")
    public Set<ProductOption> getProductOptions() {
        return this.productOptions;
    }

    public void setProductOptions(Set<ProductOption> productOptions) {
        this.productOptions = productOptions;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "product")
    public Set<ProductDescription> getProductDescriptions() {
        return this.productDescriptions;
    }

    public void setProductDescriptions(Set<ProductDescription> productDescriptions) {
        this.productDescriptions = productDescriptions;
    }

    @Column(name = "old_id", length = 45)
    public String getOldId() {
        return oldId;
    }

    public void setOldId(String oldId) {
        this.oldId = oldId;
    }

    @Column(name = "show_on_apps", nullable = false)
    public boolean getShowOnApps() {
        return showOnApps;
    }

    public void setShowOnApps(boolean showOnApps) {
        this.showOnApps = showOnApps;
    }

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "shop_product", catalog = "loccitane", joinColumns = {@JoinColumn(name = "product_id", nullable = false, updatable = false)}, inverseJoinColumns = {@JoinColumn(name = "shop_id", nullable = false, updatable = false)})
    public Set<Shop> getShops() {
        return this.shops;
    }

    public void setShops(Set<Shop> shops) {
        this.shops = shops;
    }

    @Transient
    public List<Long> getAllCategoryIds() {
        List<Long> categoryIds = new ArrayList<>();
        Category current = category;
        while (current != null) {
            categoryIds.add(current.getId());
            current = current.getCategory();
        }
        return categoryIds;
    }

    @Transient
    public String getDescription() {
        if (getProductDescriptions() != null && getProductDescriptions().size() > 0) {
            for (ProductDescription pd : getProductDescriptions()) {
                if (pd.getProductDescriptionKey() != null
                        && pd.getProductDescriptionKey().getReference().equals(CommonConstant.PRODUCT_DESCRIPTION_KEY_REF_DESCRIPTION)
                        && StringUtils.isNotBlank(pd.getValue())) {
                    String value = pd.getValue();
                    if (value.length() >= CommonConstant.PRODUCT_DESCRIPTION_VALUE_SUBSTRING) {
                        String subValue = value.substring(0, CommonConstant.PRODUCT_DESCRIPTION_VALUE_SUBSTRING - 1) + "... ...";
                        return subValue;
                    } else {
                        return value;
                    }

                }
            }
        }
        return "";
    }

    @Transient
    public String getProductType() {
        return getCategory().getTheTopestCategoryUnderRoot().getReference();
    }

    @Transient
    public Boolean getIsGoods() {
        Boolean isGoods = false;
        if (getProductType().equals("CA-GOODS")) {
            isGoods = true;
        }
        return isGoods;
    }

    @Transient
    public List<ProductOption> getSortedProductOptions() {
        return productOptions.stream().filter(ProductOption::isIsActive).sorted((e1, e2) -> e1.getLabel3().compareTo(e2.getLabel3())).collect(Collectors.toList());
    }

    @Transient
    public String getFullName() {
        return getCategory().getFullName() + ">" + name;
    }

    @Transient
    public String getFullName2() {
        return getCategory().getFullNameExceptProdType() + ">" + name;
    }
}
