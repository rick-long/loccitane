package org.spa.model.product;
// Generated 2016-3-31 15:50:45 by Hibernate Tools 4.3.1.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.spa.model.company.Company;
import org.spa.model.inventory.InventoryPurchaseOrder;
import org.spa.model.shop.Address;

/**
 * Supplier generated by hbm2java
 */
@Entity
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
@Table(name = "SUPPLIER", catalog = "loccitane")
public class Supplier implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Long id;
	private Company company;
	private String name;
	private String reference;
	private String contactPerson;
	private String contactEmail;
	private String contactTel;
	private boolean isActive;
	private Date created;
	private String createdBy;
	private Date lastUpdated;
	private String lastUpdatedBy;
	
	private Set<Product> products = new HashSet<Product>(0);
	private Set<Address> addresses = new HashSet<Address>(0);
	private Set<InventoryPurchaseOrder> inventoryPurchaseOrders = new HashSet<InventoryPurchaseOrder>(0);

	public Supplier() {
	}

	public Supplier(String reference, boolean isActive) {
		this.reference = reference;
		this.isActive = isActive;
	}

	public Supplier(Company company, String name, String reference, String contactPerson, String contactEmail,
			String contactTel, boolean isActive, Date created, String createdBy, Date lastUpdated, String lastUpdatedBy,
			Set<Product> products, Set<Address> addresses, Set<InventoryPurchaseOrder> inventoryPurchaseOrders) {
		this.company = company;
		this.name = name;
		this.reference = reference;
		this.contactPerson = contactPerson;
		this.contactEmail = contactEmail;
		this.contactTel = contactTel;
		this.isActive = isActive;
		this.created = created;
		this.createdBy = createdBy;
		this.lastUpdated = lastUpdated;
		this.lastUpdatedBy = lastUpdatedBy;
		this.products = products;
		this.addresses = addresses;
		this.inventoryPurchaseOrders = inventoryPurchaseOrders;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "company_id")
	public Company getCompany() {
		return this.company;
	}

	public void setCompany(Company company) {
		this.company = company;
	}

	@Column(name = "name", length = 100)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "reference", nullable = false, length = 50)
	public String getReference() {
		return this.reference;
	}

	public void setReference(String reference) {
		this.reference = reference;
	}

	@Column(name = "contact_person", length = 45)
	public String getContactPerson() {
		return this.contactPerson;
	}

	public void setContactPerson(String contactPerson) {
		this.contactPerson = contactPerson;
	}

	@Column(name = "contact_email", length = 45)
	public String getContactEmail() {
		return this.contactEmail;
	}

	public void setContactEmail(String contactEmail) {
		this.contactEmail = contactEmail;
	}

	@Column(name = "contact_tel", length = 45)
	public String getContactTel() {
		return this.contactTel;
	}

	public void setContactTel(String contactTel) {
		this.contactTel = contactTel;
	}

	@Column(name = "is_active", nullable = false)
	public boolean isIsActive() {
		return this.isActive;
	}

	public void setIsActive(boolean isActive) {
		this.isActive = isActive;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", length = 19)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Column(name = "created_by", length = 100)
	public String getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_updated", length = 19)
	public Date getLastUpdated() {
		return this.lastUpdated;
	}

	public void setLastUpdated(Date lastUpdated) {
		this.lastUpdated = lastUpdated;
	}

	@Column(name = "last_updated_by", length = 100)
	public String getLastUpdatedBy() {
		return this.lastUpdatedBy;
	}

	public void setLastUpdatedBy(String lastUpdatedBy) {
		this.lastUpdatedBy = lastUpdatedBy;
	}

	@ManyToMany(fetch = FetchType.LAZY,cascade = CascadeType.ALL)
    @JoinTable(name = "supplier_product", catalog = "loccitane", joinColumns = { 
    		@JoinColumn(name = "supplier_id", nullable = false, updatable = false) }, inverseJoinColumns = { 
    				@JoinColumn(name = "product_id", nullable = false, updatable = false) })
	public Set<Product> getProducts() {
		return this.products;
	}

	public void setProducts(Set<Product> products) {
		this.products = products;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "supplier")
	public Set<Address> getAddresses() {
		return this.addresses;
	}

	public void setAddresses(Set<Address> addresses) {
		this.addresses = addresses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "supplier")
	public Set<InventoryPurchaseOrder> getInventoryPurchaseOrders() {
		return this.inventoryPurchaseOrders;
	}

	public void setInventoryPurchaseOrders(Set<InventoryPurchaseOrder> inventoryPurchaseOrders) {
		this.inventoryPurchaseOrders = inventoryPurchaseOrders;
	}

}
