package org.spa.model.order;
// Generated 2016-4-21 11:33:53 by Hibernate Tools 4.3.1.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.apache.commons.lang3.StringUtils;
import org.spa.model.book.BookItem;
import org.spa.model.inventory.InventoryTransaction;
import org.spa.model.payment.Payment;
import org.spa.model.prepaid.PrepaidTopUpTransaction;
import org.spa.model.product.ProductOption;
import org.spa.serviceImpl.book.BookItemServiceImpl;
import org.spa.utils.NumberUtil;
import org.spa.utils.SpringUtil;
import org.spa.model.order.StaffCommission;

import com.spa.constant.CommonConstant;

/**
 * PurchaseItem generated by hbm2java
 */
@Entity
@Table(name = "PURCHASE_ITEM", catalog = "loccitane")
public class PurchaseItem implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Long id;
	private ProductOption productOption;
	private PurchaseOrder purchaseOrder;
	
	private PrepaidTopUpTransaction buyPrepaidTopUpTransaction;//购买预付所关联的订单明细
	
	private int qty;
	private double price;//单价
	private double amount;//outstanding
	
	/* 当用package付款时，折扣后的amount
     * if a sales paid by prepaid package. netAmount = effectiveAmount * (prepaid face value / prepaid value). 
     * Then use it to cal net commission
     * */
	private double netAmount;
	
	private double effectiveValue;//实际有效值
	
	private Double discountValue;// total discount
	private Double extraDiscountValue;
	private String status;
	private Date startTime;
	private Date endTime;
	private Integer duration;
	private boolean isActive;
	private Date created;
	private String createdBy;
	private Date lastUpdated;
	private String lastUpdatedBy;
	private String bookItemId;
	
	private Set<StaffCommission> staffCommissions = new HashSet<StaffCommission>(0);
	private Set<Payment> payments = new HashSet<Payment>(0);//for redeem prepaid
	private Set<InventoryTransaction> inventoryTransactions = new HashSet<InventoryTransaction>(0);
	
    private String oldId;

    @Column(name = "old_id", length = 45)
    public String getOldId() {
        return this.oldId;
    }

    public void setOldId(String oldId) {
        this.oldId = oldId;
    }

	public PurchaseItem() {
	}

	public PurchaseItem(ProductOption productOption, PurchaseOrder purchaseOrder, int qty, double price, String status,
			boolean isActive) {
		this.productOption = productOption;
		this.purchaseOrder = purchaseOrder;
		this.qty = qty;
		this.price = price;
		this.status = status;
		this.isActive = isActive;
	}

	public PurchaseItem(ProductOption productOption, PurchaseOrder purchaseOrder, int qty, double price,
			Double discountValue, Double extraDiscountValue, String status, Date startTime, Date endTime,
			Integer duration, boolean isActive, Date created, String createdBy, Date lastUpdated, String lastUpdatedBy,
			Set<StaffCommission> staffCommissions, Set<Payment> payments,PrepaidTopUpTransaction prepaidTopUpTransaction,
			double amount,String bookItemId,double effectiveValue,Set<InventoryTransaction> inventoryTransactions) {
		this.productOption = productOption;
		this.purchaseOrder = purchaseOrder;
		this.qty = qty;
		this.price = price;
		this.discountValue = discountValue;
		this.extraDiscountValue = extraDiscountValue;
		this.status = status;
		this.startTime = startTime;
		this.endTime = endTime;
		this.duration = duration;
		this.isActive = isActive;
		this.created = created;
		this.createdBy = createdBy;
		this.lastUpdated = lastUpdated;
		this.lastUpdatedBy = lastUpdatedBy;
		this.staffCommissions = staffCommissions;
		this.payments = payments;
		this.buyPrepaidTopUpTransaction=prepaidTopUpTransaction;
		this.amount=amount;
		this.bookItemId=bookItemId;
		this.effectiveValue=effectiveValue;
		this.inventoryTransactions=inventoryTransactions;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "product_option_id")
	public ProductOption getProductOption() {
		return this.productOption;
	}

	public void setProductOption(ProductOption productOption) {
		this.productOption = productOption;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "purchase_order_id", nullable = false)
	public PurchaseOrder getPurchaseOrder() {
		return this.purchaseOrder;
	}

	public void setPurchaseOrder(PurchaseOrder purchaseOrder) {
		this.purchaseOrder = purchaseOrder;
	}

	@Column(name = "qty", nullable = false)
	public int getQty() {
		return this.qty;
	}

	public void setQty(int qty) {
		this.qty = qty;
	}

	@Column(name = "price", nullable = false, precision = 22, scale = 0)
	public double getPrice() {
		return this.price;
	}

	public void setPrice(double price) {
		this.price = price;
	}

	@Column(name = "amount", nullable = false, precision = 22, scale = 0)
	public double getAmount() {
		return amount;
	}
	public void setAmount(double amount) {
		this.amount = amount;
	}
	
	@Column(name = "net_amount", nullable = false, precision = 22, scale = 0)
	public double getNetAmount() {
		return netAmount;
	}
	public void setNetAmount(double netAmount) {
		this.netAmount = netAmount;
	}
	@Column(name = "effective_value", nullable = false, precision = 22, scale = 0)
	public double getEffectiveValue() {
		return effectiveValue;
	}
	public void setEffectiveValue(double effectiveValue) {
		this.effectiveValue = effectiveValue;
	}
	
	@Column(name = "total_discount", precision = 22, scale = 0)
	public Double getDiscountValue() {
		return this.discountValue;
	}

	public void setDiscountValue(Double discountValue) {
		this.discountValue = discountValue;
	}

	@Column(name = "extra_discount_value", precision = 22, scale = 0)
	public Double getExtraDiscountValue() {
		return this.extraDiscountValue;
	}

	public void setExtraDiscountValue(Double extraDiscountValue) {
		this.extraDiscountValue = extraDiscountValue;
	}

	@Column(name = "status", nullable = false, length = 45)
	public String getStatus() {
		return this.status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	@Temporal(TemporalType.TIME)
	@Column(name = "start_time", length = 8)
	public Date getStartTime() {
		return this.startTime;
	}

	public void setStartTime(Date startTime) {
		this.startTime = startTime;
	}

	@Temporal(TemporalType.TIME)
	@Column(name = "end_time", length = 8)
	public Date getEndTime() {
		return this.endTime;
	}

	public void setEndTime(Date endTime) {
		this.endTime = endTime;
	}

	@Column(name = "duration")
	public Integer getDuration() {
		return this.duration;
	}

	public void setDuration(Integer duration) {
		this.duration = duration;
	}

	@Column(name = "is_active", nullable = false)
	public boolean isIsActive() {
		return this.isActive;
	}

	public void setIsActive(boolean isActive) {
		this.isActive = isActive;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", length = 19)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Column(name = "created_by", length = 100)
	public String getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_updated", length = 19)
	public Date getLastUpdated() {
		return this.lastUpdated;
	}

	public void setLastUpdated(Date lastUpdated) {
		this.lastUpdated = lastUpdated;
	}

	@Column(name = "last_updated_by", length = 100)
	public String getLastUpdatedBy() {
		return this.lastUpdatedBy;
	}

	public void setLastUpdatedBy(String lastUpdatedBy) {
		this.lastUpdatedBy = lastUpdatedBy;
	}

	@Column(name = "book_item_id", length = 255)
	public String getBookItemId() {
		return bookItemId;
	}
	public void setBookItemId(String bookItemId) {
		this.bookItemId = bookItemId;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "purchaseItem",cascade = CascadeType.ALL, orphanRemoval = true)
	public Set<StaffCommission> getStaffCommissions() {
		return this.staffCommissions;
	}

	public void setStaffCommissions(Set<StaffCommission> staffCommissions) {
		this.staffCommissions = staffCommissions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "purchaseItem")
	public Set<InventoryTransaction> getInventoryTransactions() {
		return inventoryTransactions;
	}
	public void setInventoryTransactions(Set<InventoryTransaction> inventoryTransactions) {
		this.inventoryTransactions = inventoryTransactions;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "purchaseItem")
	public Set<Payment> getPayments() {
		return this.payments;
	}

	public void setPayments(Set<Payment> payments) {
		this.payments = payments;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "prepaid_top_up_transaction_id")
	public PrepaidTopUpTransaction getBuyPrepaidTopUpTransaction() {
		return buyPrepaidTopUpTransaction;
	}
	public void setBuyPrepaidTopUpTransaction(PrepaidTopUpTransaction buyPrepaidTopUpTransaction) {
		this.buyPrepaidTopUpTransaction = buyPrepaidTopUpTransaction;
	}
	
	@Transient
	public String getTherapistNames() {
        String names = "";

        Set tempSet =getStaffCommissions();

        if (tempSet != null && tempSet.size() > 0) {
            Iterator i = tempSet.iterator();
            while (i.hasNext()) {
                if (names.length() > 0) names += " / ";
                names += ((StaffCommission) i.next()).getStaff().getDisplayName();
            }
        }
        return names;
    }
	
	@Transient
	public String getTherapistAndCommission(){
		StringBuilder sb = new StringBuilder();
        for (StaffCommission sc : getStaffCommissions()) {
            sb.append(sc.getStaff().getDisplayName());
            sb.append(": ");
            sb.append(NumberUtil.mathRoundHalfUp(2,getFinalCommission(sc))).append("(").append(NumberUtil.mathRoundHalfUp(2,getFinalExtraCommission(sc))).append(")");
            sb.append("<br/>");
        }
        return sb.toString();
	}
	@Transient
	public String getTherapistAndCommission2(){
		StringBuilder sb = new StringBuilder();
		int i=0;
		for (StaffCommission sc : getStaffCommissions()) {
			i++;
			sb.append(sc.getStaff().getDisplayName());
			sb.append(": ");
			sb.append(NumberUtil.mathRoundHalfUp(2,getFinalCommission(sc))).append("(").append(NumberUtil.mathRoundHalfUp(2,getFinalExtraCommission(sc))).append(")");
			if(getStaffCommissions().size()>i){
				sb.append(" / ");
			}

		}
		return sb.toString();
	}
	
	@Transient
	public String getTherapistAndCommissionRate(){
		StringBuilder sb = new StringBuilder();
        for (StaffCommission sc : getStaffCommissions()) {
            sb.append(sc.getStaff().getDisplayName());
            sb.append(": ");
            sb.append(getFinalCommissionRate(sc)).append("(").append(getFinalExtraCommissionRate(sc)).append(")");
            sb.append("<br/>");
        }
        return sb.toString();
	}
	@Transient
	public String getTherapistAndCommissionRate2(){
		StringBuilder sb = new StringBuilder();
		for (StaffCommission sc : getStaffCommissions()) {
			sb.append(sc.getStaff().getDisplayName());
			sb.append(": ");
			sb.append(getFinalCommissionRate(sc)).append("(").append(getFinalExtraCommissionRate(sc)).append(")");
		}
		return sb.toString();
	}
	
	@Transient
	public Double getCommissionRateByStaff(Long staffId){
		Double commisisonRate=0d;
		for (StaffCommission sc : getStaffCommissions()) {
            if (sc.getStaff().getId().longValue() == staffId.longValue()) {
            	commisisonRate = getFinalCommissionRate(sc);
            }
        }
        return commisisonRate;
	}
	
	private Double getFinalCommission(StaffCommission sc){
		Double finalComm=0d;
		if(sc.getTargetCommission() >0){
			finalComm = sc.getTargetCommission();
		}else{
			finalComm =sc.getCommissionValue();
		}
		return finalComm;
	}
	
	private Double getFinalExtraCommission(StaffCommission sc){
		Double finalExtraComm=0d;
		if(sc.getTargetExtraCommission() >0){
			finalExtraComm = sc.getTargetExtraCommission();
		}else{
			finalExtraComm =sc.getExtraCommission();
		}
		return finalExtraComm;
	}
	
	private Double getFinalCommissionRate(StaffCommission sc){
		Double finalCommRate=0d;
		if(sc.getTargetCommission() >0){
			finalCommRate = sc.getTargetCommissionRate();
		}else{
			finalCommRate =sc.getCommissionRate();
		}
		return finalCommRate;
	}
	
	private Double getFinalExtraCommissionRate(StaffCommission sc){
		Double finalCommRate=0d;
		if(sc.getTargetExtraCommissionRate() >0){
			finalCommRate = sc.getTargetExtraCommissionRate();
		}else{
			finalCommRate =sc.getExtraCommissionRate();
		}
		return finalCommRate;
	}
	
	@Transient
	public Payment getFirstPaymentWhenRedeemPrepaid(){
		Set<Payment> paymentSet=getPayments();
		if(paymentSet !=null && paymentSet.size()>0){
			return paymentSet.iterator().next();
		}
		return null;
	}
	
	@Transient
	public Double getPackagePaid(){
		Double packageRedeem = 0d;
		
		Payment payment = getFirstPaymentWhenRedeemPrepaid();
		if(payment !=null && payment.getRedeemPrepaidTopUpTransaction() !=null &&
				(payment.getRedeemPrepaidTopUpTransaction().getPrepaidType().equals(CommonConstant.PREPAID_TYPE_CASH_PACKAGE)
				 || payment.getRedeemPrepaidTopUpTransaction().getPrepaidType().equals(CommonConstant.PREPAID_TYPE_TREATMENT_PACKAGE))){
			packageRedeem = payment.getAmount();
		}
		return packageRedeem;
	}
	
	@Transient
	public Double getVoucherPaid(){
		Double voucherRedeem = 0d;
		
		Payment payment = getFirstPaymentWhenRedeemPrepaid();
		if(payment !=null && payment.getRedeemPrepaidTopUpTransaction() !=null &&
				(payment.getRedeemPrepaidTopUpTransaction().getPrepaidType().equals(CommonConstant.PREPAID_TYPE_CASH_VOUCHER)
				 || payment.getRedeemPrepaidTopUpTransaction().getPrepaidType().equals(CommonConstant.PREPAID_TYPE_TREATMENT_VOUCHER))){
			voucherRedeem = payment.getAmount();
		}
		return voucherRedeem;
	}
	
	@Transient
	public Double getTotalCommission() {

        Double commission = 0d;

        for (StaffCommission sc : getStaffCommissions()) {
        	if(sc.getTargetCommission() >0){
        		 commission +=NumberUtil.mathRoundHalfUp(2, sc.getTargetCommission());
        	}else{
        		 commission +=NumberUtil.mathRoundHalfUp(2, sc.getCommissionValue());
        	}
        }
        return commission;
    }
	@Transient
	public Double getTotalExtraCommission() {

        Double commission = 0d;

        for (StaffCommission sc : getStaffCommissions()) {
        	if(sc.getTargetExtraCommission() >0){
        		commission +=NumberUtil.mathRoundHalfUp(2, sc.getTargetExtraCommission());
        	}else{
        		commission +=NumberUtil.mathRoundHalfUp(2, sc.getExtraCommission());
        	}
        }
        return commission;
    }
	
	@Transient
	public Double getTotalCommissionByStaff(Long staffId) {

		 Double commission = 0d;
        for (StaffCommission sc : getStaffCommissions()) {
            if (sc.getStaff().getId().longValue() == staffId.longValue()) {
            	commission = getTotalCommission();
            }
        }
        return commission;
    }
	@Transient
	public Double getTotalExtraCommissionByStaff(Long staffId) {

		 Double commission = 0d;
        for (StaffCommission sc : getStaffCommissions()) {
            if (sc.getStaff().getId().longValue() == staffId.longValue()) {
            	commission =  getTotalExtraCommission();
            }
        }
        return commission;
    }
	@Transient
	public String getPurchaseItemNames() {
		String purchaseItemName ="";
		if(getProductOption() !=null){
			purchaseItemName = getProductOption().getLabel3();
		}else{
			purchaseItemName = getBuyPrepaidTopUpTransaction().getPrepaid().getName();
		}
		return purchaseItemName;
	}
	@Transient
	public String getPurchaseItemNames2() {
		String purchaseItemName2 ="";
		if(getProductOption() !=null){
			purchaseItemName2 = getProductOption().getLabel3();
		}else{
			purchaseItemName2 = getBuyPrepaidTopUpTransaction().getPrepaid().getName();
		}
		return purchaseItemName2;
	}
	@Transient
	public String getPurchaseItemNames3(){
		String purchaseItemName2 ="";
		if(getProductOption() !=null){
			purchaseItemName2 = getProductOption().getLabel6();
		}else{
			purchaseItemName2 = getBuyPrepaidTopUpTransaction().getPrepaid().getName();
		}
		return purchaseItemName2;
	}
	@Transient
	public Double getTherapistAmount(Long staffId) {

        Double amount = 0d;
        for (StaffCommission sc : getStaffCommissions()) {
            if (sc.getStaff().getId().longValue() == staffId.longValue()) {
            	amount =NumberUtil.mathRoundHalfUp(2, sc.getAmount());
            }
        }
        return amount;
    }
	
	@Transient
	public Boolean getIsRequested(){
		BookItemServiceImpl bookItemServiceImpl = (BookItemServiceImpl)SpringUtil.getBean(BookItemServiceImpl.class);
		if(StringUtils.isNoneBlank(getBookItemId())){
			BookItem  bi = bookItemServiceImpl.get(new Long(getBookItemId()));
			if(bi == null){
				return false;
			}
			return bi.getOnRequest() !=null ? bi.getOnRequest() : false;
		}else{
			return false;
		}
	}
	
	@Transient
	public String getTherapist(){
		String therapist="";
		for (StaffCommission sc : getStaffCommissions()) {
			therapist=sc.getStaff().getDisplayName();
		}
		return therapist;
	}
	@Transient
	public String getProdType(){
		String prodType="";
		if(this.productOption!=null&&productOption.getProduct()!=null){
			prodType=productOption.getProduct().getProdType();
		}
		return prodType;

	}
}
