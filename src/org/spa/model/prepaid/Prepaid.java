package org.spa.model.prepaid;
// Generated 2016-4-11 15:06:56 by Hibernate Tools 4.3.1.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import org.spa.model.awardRedemption.AwardRedemption;
import org.spa.model.awardRedemption.AwardRedemptionTransaction;
import org.spa.model.company.Company;
import org.spa.model.order.PurchaseItem;
import org.spa.model.payment.Payment;
import org.spa.model.product.Category;
import org.spa.model.product.ProductOption;
import org.spa.model.shop.Shop;
import org.spa.model.user.User;

import com.spa.constant.CommonConstant;

/**
 * Prepaid generated by hbm2java
 */
@Entity
@Table(name = "PREPAID", catalog = "loccitane")
public class Prepaid implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Long id;
	private Company company;//购买时的公司
	
	private Shop shop;//购买时的店铺
	private User user;
	private String reference;
	private String name;
	private String remarks;
	
	private String prepaidType;
	private String packageType;
	private Double prepaidValue;
	
	private Double initValue;
	
	private Double remainValue;
	
	private String pickUpType;
	private String pickUpLocation;
	private boolean isActive;
	private Boolean isTransfer;
	private Boolean isFree;
	
	private Boolean isAllCompanyUse;
	
	private Date created;
	private String createdBy;
	private Date lastUpdated;
	private String lastUpdatedBy;
	
	private String oldId;


	private Set<PrepaidTopUpTransaction> prepaidTopUpTransactions = new HashSet<PrepaidTopUpTransaction>(0);
	private Set<AwardRedemptionTransaction> awardRedemptionTransactions = new HashSet<AwardRedemptionTransaction>(0);
	
	private Boolean isRedeem;
	private Boolean isOnline;
	
	
	private String additionalEmail;
	private String additionalName;
	private String additionalMessage;
	
	
	public Prepaid() {
	}
	
	public Prepaid(Category category, Company company, ProductOption productOption, Shop shop, String reference,
			String prepaidType, String packageType, Double commissionRate, Double prepaidValue, Double remainValue,
			Double extraDiscount, String pickUpType, String pickUpLocation, boolean isActive,Boolean isTransfer, Date created,
			String createdBy, Date lastUpdated, String lastUpdatedBy,String name,String remarks,Boolean isFree,String oldId,
			Set<PrepaidTopUpTransaction> prepaidTopUpTransactions,User user,Set<Payment> payments,Set<PurchaseItem> purchaseItems,Boolean isRedeem,Boolean isOnline,
			Double initValue,Boolean isAllCompanyUse,Set<AwardRedemption> awardRedemptions,Set<AwardRedemptionTransaction> awardRedemptionTransactions,String additionalEmail,String additionalName,String additionalMessage) {
		this.company = company;
		this.shop = shop;
		this.reference = reference;
		this.name=name;
		this.remarks=remarks;
		this.prepaidValue = prepaidValue;
		this.remainValue = remainValue;
		this.prepaidType = prepaidType;
		this.packageType = packageType;
		this.pickUpType = pickUpType;
		this.pickUpLocation = pickUpLocation;
		this.isActive = isActive;
		this.isTransfer=isTransfer;
		this.created = created;
		this.createdBy = createdBy;
		this.lastUpdated = lastUpdated;
		this.lastUpdatedBy = lastUpdatedBy;
		this.prepaidTopUpTransactions = prepaidTopUpTransactions;
		this.user=user;
		this.initValue=initValue;
		this.isAllCompanyUse=isAllCompanyUse;
		this.awardRedemptionTransactions=awardRedemptionTransactions;
		this.isFree=isFree;
		this.oldId=oldId;
		this.isRedeem=isRedeem;
		this.isOnline=isOnline;
		this.additionalEmail=additionalEmail;
		this.additionalMessage=additionalMessage;
		this.additionalName=additionalName;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "company_id", nullable = false)
	public Company getCompany() {
		return this.company;
	}

	public void setCompany(Company company) {
		
		this.company = company;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "shop_id")
	public Shop getShop() {
		return this.shop;
	}

	public void setShop(Shop shop) {
		this.shop = shop;
	}

	@Column(name = "reference", nullable = false, length = 100)
	public String getReference() {
		return this.reference;
	}

	public void setReference(String reference) {
		this.reference = reference;
	}

	@Column(name = "prepaid_type", nullable = false, length = 45)
	public String getPrepaidType() {
		return this.prepaidType;
	}

	public void setPrepaidType(String prepaidType) {
		this.prepaidType = prepaidType;
	}

	@Column(name = "package_type", length = 45)
	public String getPackageType() {
		return this.packageType;
	}

	public void setPackageType(String packageType) {
		this.packageType = packageType;
	}
	
	@Column(name = "prepaid_value", nullable=false,precision = 22, scale = 0)
	public Double getPrepaidValue() {
		return this.prepaidValue;
	}

	public void setPrepaidValue(Double prepaidValue) {
		this.prepaidValue = prepaidValue;
	}

	@Column(name = "remain_value", nullable=false,precision = 22, scale = 0)
	public Double getRemainValue() {
		return this.remainValue;
	}

	public void setRemainValue(Double remainValue) {
		this.remainValue = remainValue;
	}
	
	@Column(name = "pick_up_type", length = 45)
	public String getPickUpType() {
		return this.pickUpType;
	}

	public void setPickUpType(String pickUpType) {
		this.pickUpType = pickUpType;
	}

	@Column(name = "pick_up_location", length = 45)
	public String getPickUpLocation() {
		return this.pickUpLocation;
	}

	public void setPickUpLocation(String pickUpLocation) {
		this.pickUpLocation = pickUpLocation;
	}
	@Column(name = "is_active", nullable = false)
	public boolean isIsActive() {
		return this.isActive;
	}

	public void setIsActive(boolean isActive) {
		this.isActive = isActive;
	}

	@Column(name = "is_transfer")
	public Boolean getIsTransfer() {
		return isTransfer;
	}
	public void setIsTransfer(Boolean isTransfer) {
		this.isTransfer = isTransfer;
	}
	
	@Column(name = "is_free")
	public Boolean getIsFree() {
		return isFree;
	}
	public void setIsFree(Boolean isFree) {
		this.isFree = isFree;
	}
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", length = 19)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Column(name = "created_by", length = 100)
	public String getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_updated", length = 19)
	public Date getLastUpdated() {
		return this.lastUpdated;
	}

	public void setLastUpdated(Date lastUpdated) {
		this.lastUpdated = lastUpdated;
	}

	@Column(name = "last_updated_by", length = 100)
	public String getLastUpdatedBy() {
		return this.lastUpdatedBy;
	}

	public void setLastUpdatedBy(String lastUpdatedBy) {
		this.lastUpdatedBy = lastUpdatedBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "prepaid")
	@OrderBy("topUpDate ASC")
	public Set<PrepaidTopUpTransaction> getPrepaidTopUpTransactions() {
		return this.prepaidTopUpTransactions;
	}

	public void setPrepaidTopUpTransactions(Set<PrepaidTopUpTransaction> prepaidTopUpTransactions) {
		this.prepaidTopUpTransactions = prepaidTopUpTransactions;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "member_id", nullable = false)
	public User getUser() {
		return this.user;
	}

	public void setUser(User user) {
		this.user = user;
	}
	@Column(name = "name",length = 255)
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	@Column(name = "remarks",length = 255)
	public String getRemarks() {
		return remarks;
	}
	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}
	
	
	@Column(name = "init_value", nullable=false,precision = 22, scale = 0)
	public Double getInitValue() {
		return initValue;
	}
	public void setInitValue(Double initValue) {
		this.initValue = initValue;
	}
	
	@Column(name = "is_all_company_use", nullable = false)
	public Boolean getIsAllCompanyUse() {
		return isAllCompanyUse;
	}
	public void setIsAllCompanyUse(Boolean isAllCompanyUse) {
		this.isAllCompanyUse = isAllCompanyUse;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "redeemPrepaid")
	public Set<AwardRedemptionTransaction> getAwardRedemptionTransactions() {
		return this.awardRedemptionTransactions;
	}

	public void setAwardRedemptionTransactions(Set<AwardRedemptionTransaction> awardRedemptionTransactions) {
		this.awardRedemptionTransactions = awardRedemptionTransactions;
	}
	@Column(name = "old_id", length = 100)
	public String getOldId() {
		return oldId;
	}
	public void setOldId(String oldId) {
		this.oldId = oldId;
	}
	
	@Column(name = "is_redeem", nullable = false)
	public Boolean getIsRedeem() {
		return isRedeem;
	}
	public void setIsRedeem(Boolean isRedeem) {
		this.isRedeem = isRedeem;
	}
	
	@Column(name = "is_online", nullable = false)
	public Boolean getIsOnline() {
		return isOnline;
	}
	public void setIsOnline(Boolean isOnline) {
		this.isOnline = isOnline;
	}
	
	@Column(name = "addtional_email",length = 100)
	public String getAdditionalEmail() {
		return additionalEmail;
	}
	public void setAdditionalEmail(String additionalEmail) {
		this.additionalEmail = additionalEmail;
	}
	
	@Column(name = "addtional_message",length = 255)
	public String getAdditionalMessage() {
		return additionalMessage;
	}
	public void setAdditionalMessage(String additionalMessage) {
		this.additionalMessage = additionalMessage;
	}
	
	@Column(name = "addtional_name",length = 100)
	public String getAdditionalName() {
		return additionalName;
	}
	public void setAdditionalName(String additionalName) {
		this.additionalName = additionalName;
	}

	@Transient
	public PrepaidTopUpTransaction getFirstPrepaidTopUpTransaction(){
		PrepaidTopUpTransaction prepaidTopUpTransaction=null;
		Set<PrepaidTopUpTransaction> sets=getPrepaidTopUpTransactions();
		if(sets !=null && sets.size()>0){
			prepaidTopUpTransaction=sets.iterator().next();
		}
		return prepaidTopUpTransaction;
	}
	@Transient
	public Boolean getIsUsedPrepaid(){
		Boolean prepaidUsed=false;
		for(PrepaidTopUpTransaction ptt:getPrepaidTopUpTransactions()){
			if(ptt.getIsUsedTopUpTransaction()){
				prepaidUsed=true;
				break;
			}
		}
		return prepaidUsed;
	}
	
	@Transient
	public Boolean getIsTopUpPrepaid(){
		String prepaidType=getPrepaidType();
		Boolean topUpPrepaid=false;
		if(isIsActive() && 
				(prepaidType.equals(CommonConstant.PREPAID_TYPE_CASH_PACKAGE) ||  prepaidType.equals(CommonConstant.PREPAID_TYPE_TREATMENT_PACKAGE))){
			topUpPrepaid=true;
		}
		return topUpPrepaid;
	}
	@Transient
	public Boolean getIsEditPepaid(){
		Boolean editPrepaid=false;
		String prepaidType=getPrepaidType();
		if((prepaidType.equals(CommonConstant.PREPAID_TYPE_TREATMENT_VOUCHER) ||  prepaidType.equals(CommonConstant.PREPAID_TYPE_CASH_VOUCHER) &&
				isIsActive())){
			editPrepaid=true;
		}else{
			if(getPrepaidTopUpTransactions() !=null && getPrepaidTopUpTransactions().size() ==1){
				editPrepaid=true;
			}
		}
		return editPrepaid;
	}
	@Transient
	public String getIsActiveYOrN(){
		String isActive="";
		if(this.isActive){
			isActive="Y";
		}else {
			isActive="N";
		}
		return isActive;
	}
	@Transient
	public Double getFaceValue(){
		Double faceValue=0d;
		for(PrepaidTopUpTransaction ptt : getPrepaidTopUpTransactions()){
			if(ptt.isIsActive()){
				faceValue +=ptt.getFaceValue();
			}
		}
		return faceValue;
	}
	@Transient
	public Double getRemainingValueByAvailableTransaction(){
		Date now =new Date();
		Double totalRemainValue = 0d;
		PrepaidTopUpTransaction ptt;
		Set<PrepaidTopUpTransaction> sets=getPrepaidTopUpTransactions();
		if(sets !=null && sets.size()>0){
			Iterator<PrepaidTopUpTransaction> it =sets.iterator();
			while(it.hasNext()){
				ptt =it.next();
				if(ptt.isIsActive() && ptt.getExpiryDate().after(now)){
					totalRemainValue += ptt.getRemainValue();
				}
			}
		}
		return totalRemainValue;
	}
}
