package org.spa.model.prepaid;
// Generated 2016-4-11 15:06:56 by Hibernate Tools 4.3.1.Final

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.spa.model.company.Company;
import org.spa.model.order.PurchaseItem;
import org.spa.model.order.StaffCommission;
import org.spa.model.payment.Payment;
import org.spa.model.product.Category;
import org.spa.model.product.ProductOption;
import org.spa.model.shop.Shop;
import org.spa.serviceImpl.payment.PaymentServiceImpl;
import org.spa.utils.NumberUtil;
import org.spa.utils.SpringUtil;

import com.spa.constant.CommonConstant;

/**
 * PrepaidTopUpTransaction generated by hbm2java
 */
@Entity
@Table(name = "PREPAID_TOP_UP_TRANSACTION", catalog = "loccitane")
public class PrepaidTopUpTransaction implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Long id;
	private Prepaid prepaid;
	private String topUpReference;
	private String description;
	
	private Date topUpDate;
	private Date expiryDate;
	//1--> eg: 购买一个12次的treatment package，价值2000
	//2-->eg: 购买了一个35000 cash package.
	private double topUpValue;//face value:2000 /35000
	private double topUpInitValue;//12 次 /35000
	private double remainValue;//如果消费一次，11 /35000-200
	private boolean isActive;
	
	private Category category;//充值分类
	private ProductOption productOption;//充值产品
	private Company company;//充值时的公司
	private Shop shop;//充值时的店铺
	
	private String prepaidType;//充值时的类型
	private String packageType;//充值时package类型
	private Double extraDiscount;//充值时的额外折扣
	private Double commissionRate;//充值时的提成
	
	private String remarks;
	
	private Date created;
	private String createdBy;
	private Date lastUpdated;
	private String lastUpdatedBy;
	private Boolean isRoot;//第一次购买为true，后续top up为false
	
	private String status;
	
	private Set<Payment> payments = new HashSet<Payment>(0);//redeem prepaid
	private Set<PurchaseItem> purchaseItems = new HashSet<PurchaseItem>(0);//buy prepaid
	
	public PrepaidTopUpTransaction() {
	}

	public PrepaidTopUpTransaction(Prepaid prepaid, Date topUpDate,boolean isActive, Date expiryDate, double topUpValue,
			double remainValue,Set<Payment> payments,Set<PurchaseItem> purchaseItems,Double topUpInitValue,Category category, Company company,
			ProductOption productOption, Shop shop,String prepaidType, String packageType, Double commissionRate, 
			Double extraDiscount, Date created,String createdBy, Date lastUpdated, String lastUpdatedBy,String topUpReference,
			String remarks,String description,Boolean isRoot,String status) {
		this.prepaid = prepaid;
		this.topUpDate = topUpDate;
		this.expiryDate = expiryDate;
		this.topUpValue = topUpValue;
		this.remainValue = remainValue;
		this.isActive=isActive;
		this.payments=payments;
		this.purchaseItems=purchaseItems;
		this.topUpInitValue=topUpInitValue;
		this.category = category;
		this.company = company;
		this.productOption = productOption;
		this.prepaidType = prepaidType;
		this.packageType = packageType;
		this.extraDiscount = extraDiscount;
		this.extraDiscount = extraDiscount;
		this.purchaseItems=purchaseItems;
		this.category = category;
		this.company = company;
		this.productOption = productOption;
		this.shop = shop;
		this.topUpReference = topUpReference;
		this.prepaidType = prepaidType;
		this.packageType = packageType;
		this.remainValue = remainValue;
		this.extraDiscount = extraDiscount;
		this.isActive = isActive;
		this.created = created;
		this.createdBy = createdBy;
		this.lastUpdated = lastUpdated;
		this.lastUpdatedBy = lastUpdatedBy;
		this.commissionRate=commissionRate;
		this.payments=payments;
		this.purchaseItems=purchaseItems;
		this.description=description;
		this.remarks=remarks;
		this.isRoot=isRoot;
		this.status=status;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "prepaid_id", nullable = false)
	public Prepaid getPrepaid() {
		return this.prepaid;
	}

	public void setPrepaid(Prepaid prepaid) {
		this.prepaid = prepaid;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "top_up_date", nullable = false, length = 10)
	public Date getTopUpDate() {
		return this.topUpDate;
	}

	public void setTopUpDate(Date topUpDate) {
		this.topUpDate = topUpDate;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "expiry_date", nullable = false, length = 10)
	public Date getExpiryDate() {
		return this.expiryDate;
	}

	public void setExpiryDate(Date expiryDate) {
		this.expiryDate = expiryDate;
	}

	@Column(name = "top_up_value", nullable = false, precision = 22, scale = 0)
	public double getTopUpValue() {
		return this.topUpValue;
	}

	public void setTopUpValue(double topUpValue) {
		this.topUpValue = topUpValue;
	}

	@Column(name = "remain_value", nullable = false, precision = 22, scale = 0)
	public double getRemainValue() {
		return remainValue;
	}
	public void setRemainValue(double remainValue) {
		this.remainValue = remainValue;
	}

	@Column(name = "is_active", nullable = false)
	public boolean isIsActive() {
		return this.isActive;
	}

	public void setIsActive(boolean isActive) {
		this.isActive = isActive;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "redeemPrepaidTopUpTransaction")
	@OrderBy(value = "created asc")
	public Set<Payment> getPayments() {
		return this.payments;
	}

	public void setPayments(Set<Payment> payments) {
		this.payments = payments;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "buyPrepaidTopUpTransaction")
	public Set<PurchaseItem> getPurchaseItems() {
		return this.purchaseItems;
	}

	public void setPurchaseItems(Set<PurchaseItem> purchaseItems) {
		this.purchaseItems = purchaseItems;
	}
	
	@Column(name = "top_up_init_value", nullable = false, precision = 22, scale = 0)
	public double getTopUpInitValue() {
		return topUpInitValue;
	}
	public void setTopUpInitValue(double topUpInitValue) {
		this.topUpInitValue = topUpInitValue;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "category_id")
	public Category getCategory() {
		return this.category;
	}

	public void setCategory(Category category) {
		this.category = category;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "company_id", nullable = false)
	public Company getCompany() {
		return this.company;
	}

	public void setCompany(Company company) {
		this.company = company;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "product_option_id")
	public ProductOption getProductOption() {
		return this.productOption;
	}

	public void setProductOption(ProductOption productOption) {
		this.productOption = productOption;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "shop_id")
	public Shop getShop() {
		return this.shop;
	}

	public void setShop(Shop shop) {
		this.shop = shop;
	}

	@Column(name = "top_up_reference", nullable = false, length = 100)
	public String getTopUpReference() {
		return topUpReference;
	}
	public void setTopUpReference(String topUpReference) {
		this.topUpReference = topUpReference;
	}
	
	@Column(name = "prepaid_type", nullable = false, length = 45)
	public String getPrepaidType() {
		return this.prepaidType;
	}

	public void setPrepaidType(String prepaidType) {
		this.prepaidType = prepaidType;
	}

	@Column(name = "package_type", length = 45)
	public String getPackageType() {
		return this.packageType;
	}

	public void setPackageType(String packageType) {
		this.packageType = packageType;
	}
	
	@Column(name = "extra_discount", precision = 22, scale = 0)
	public Double getExtraDiscount() {
		return this.extraDiscount;
	}

	public void setExtraDiscount(Double extraDiscount) {
		this.extraDiscount = extraDiscount;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", length = 19)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Column(name = "created_by", length = 100)
	public String getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_updated", length = 19)
	public Date getLastUpdated() {
		return this.lastUpdated;
	}

	public void setLastUpdated(Date lastUpdated) {
		this.lastUpdated = lastUpdated;
	}

	@Column(name = "last_updated_by", length = 100)
	public String getLastUpdatedBy() {
		return this.lastUpdatedBy;
	}
	
	public void setLastUpdatedBy(String lastUpdatedBy) {
		this.lastUpdatedBy = lastUpdatedBy;
	}
	
	@Column(name = "commission_rate",nullable=false, precision = 22, scale = 0)
	public Double getCommissionRate() {
		return commissionRate;
	}
	
	public void setCommissionRate(Double commissionRate) {
		this.commissionRate = commissionRate;
	}
	
	@Column(name = "description",length = 255)
	public String getDescription() {
		return description;
	}
	public void setDescription(String description) {
		this.description = description;
	}
	
	@Column(name = "remarks",length = 255)
	public String getRemarks() {
		return remarks;
	}
	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}
	
	@Column(name = "is_root", nullable = false)
	public Boolean getIsRoot() {
		return isRoot;
	}
	public void setIsRoot(Boolean isRoot) {
		this.isRoot = isRoot;
	}
	
	@Column(name = "status", length = 100)
	public String getStatus() {
		return status;
	}
	public void setStatus(String status) {
		this.status = status;
	}
	@Transient
	public Boolean getIsUsedTopUpTransaction(){
		Boolean isUsedTransaction=false;
		List<Payment> usedPrepaidPayments=SpringUtil.getBean(PaymentServiceImpl.class).getUsedPrepaidTopUpTransaction(id);
		if(usedPrepaidPayments !=null && usedPrepaidPayments.size()>0){
			isUsedTransaction=true;
		}
		return isUsedTransaction;
	}
	
	@Transient
	public PurchaseItem getFirstPurchaseItem(){
		PurchaseItem item=null;
		Set<PurchaseItem> sets=getPurchaseItems();
		if(sets !=null && sets.size()>0){
			item=sets.iterator().next();
		}
		return item;
	}
	
	@Transient
	public String getTherapistsAndCommissions(){
		StringBuilder sb = new StringBuilder();
        for (StaffCommission sc : getFirstPurchaseItem().getStaffCommissions()) {
            sb.append(sc.getStaff().getDisplayName());
            sb.append(": ");
            sb.append(NumberUtil.mathRoundHalfUp(2,getFinalCommission(sc))).append("(").append(NumberUtil.mathRoundHalfUp(2,getFinalExtraCommission(sc))).append(")");
            sb.append("<br/>");
        }
        return sb.toString();
	}
	@Transient
	public String getTherapistsAndCommissions2(){
		StringBuilder sb = new StringBuilder();
		for (StaffCommission sc : getFirstPurchaseItem().getStaffCommissions()) {
			sb.append(sc.getStaff().getDisplayName());
			sb.append(": ");
			sb.append(NumberUtil.mathRoundHalfUp(2,getFinalCommission(sc))).append("(").append(NumberUtil.mathRoundHalfUp(2,getFinalExtraCommission(sc))).append(")");
			sb.append(" / ");
		}
	 return sb.toString().substring(0,sb.toString().length()-1);
	}
	@Transient
	public String getTherapistAndCommissionRate(){
		StringBuilder sb = new StringBuilder();
		for (StaffCommission sc : getFirstPurchaseItem().getStaffCommissions()) {
			sb.append(sc.getStaff().getDisplayName());
			sb.append(": ");
			sb.append(NumberUtil.mathRoundHalfUp(2, getFinalCommissionRate(sc)));
			sb.append("<br/>");
		}
		return sb.toString();
	}
	@Transient
	public String getTherapistAndCommissionRate2(){
		StringBuilder sb = new StringBuilder();
		for (StaffCommission sc : getFirstPurchaseItem().getStaffCommissions()) {
			sb.append(sc.getStaff().getDisplayName());
			sb.append(": ");
			sb.append(getFinalCommissionRate(sc)).append("(").append(getFinalExtraCommissionRate(sc)).append(")");
			sb.append(" / ");
		}
		return sb.toString().substring(0,sb.toString().length()-1);
	}
	private Double getFinalCommission(StaffCommission sc){
		Double finalComm=0d;
		if(sc.getTargetCommission() >0){
			finalComm = sc.getTargetCommission();
		}else{
			finalComm =sc.getCommissionValue();
		}
		return finalComm;
	}
	
	private Double getFinalExtraCommission(StaffCommission sc){
		Double finalExtraComm=0d;
		if(sc.getTargetExtraCommission() >0){
			finalExtraComm = sc.getTargetExtraCommission();
		}else{
			finalExtraComm =sc.getExtraCommission();
		}
		return finalExtraComm;
	}
	private Double getFinalCommissionRate(StaffCommission sc){
		Double finalCommRate=0d;
		if(sc.getTargetCommission() >0){
			finalCommRate = sc.getTargetCommissionRate();
		}else{
			finalCommRate =sc.getCommissionRate();
		}
		return finalCommRate;
	}
	
	private Double getFinalExtraCommissionRate(StaffCommission sc){
		Double finalCommRate=0d;
		if(sc.getTargetExtraCommissionRate() >0){
			finalCommRate = sc.getTargetExtraCommissionRate();
		}else{
			finalCommRate =sc.getExtraCommissionRate();
		}
		return finalCommRate;
	}
	@Transient
	public Set<Payment> getPaymentsWhenBuyPrepaid(){
		if(getFirstPurchaseItem() !=null){
			return getFirstPurchaseItem().getPurchaseOrder().getPayments();
		}else{
			return null;
		}
	}
	
	@Transient
	public String getPaymentMethodsAndAmountWhenBuyPrepaid(){
		StringBuilder sb = new StringBuilder();
		if(getPaymentsWhenBuyPrepaid() !=null){
			for (Payment pay : getPaymentsWhenBuyPrepaid()) {
	            sb.append(pay.getPaymentMethod().getName());
	            sb.append(": ");
	            sb.append(pay.getAmount());
	            sb.append("<br/>");
	        }
		}
        return sb.toString();
	}
	@Transient
	public String getPaymentMethodsAndAmountWhenBuyPrepaid2(){
		StringBuilder sb = new StringBuilder();
		if(getPaymentsWhenBuyPrepaid() !=null){
			for (Payment pay : getPaymentsWhenBuyPrepaid()) {
				sb.append(pay.getPaymentMethod().getName());
				sb.append(": ");
				sb.append(pay.getAmount());
				sb.append(" / ");
			}
		}
		return sb.toString().substring(0,sb.toString().length()-1);
	}
	@Transient
	public String getIsActiveYOrN(){
		String isActive="";
		if(this.isActive){
			isActive="Y";
		}else {
			isActive="N";
		}
		return isActive;
	}
	/* created by Ivy on 12th Oct
	 * If it is a treatment Pre-paid,then the face value will be the final price * topUpInitValue(initial units).
	 * eg. final price = $100     topUpValue = $1000    topUpInitValue = 12units
	 *    ==> face value = $100 * 12units =$1200
	 *   
	 * If it is a cash Pre-paid,then the face value will be the initValue.
	 * eg. final price =$100     topUpValue =$1000    topUpInitValue = $1200
	 * 	  ==> face value = topUpInitValue =$1200
	 * */
	@Transient
	public Double getFaceValue(){
		Double faceValue;
		if(getPrepaidType().equals(CommonConstant.PREPAID_TYPE_CASH_PACKAGE) || getPrepaidType().equals(CommonConstant.PREPAID_TYPE_CASH_VOUCHER)){
			faceValue = getTopUpInitValue();
		}else{
			Double finalPrice = getProductOption().getFinalPrice(getShop().getId());
			faceValue =finalPrice  * getTopUpInitValue();
		}
		return faceValue;
	}
}
