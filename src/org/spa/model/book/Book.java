package org.spa.model.book;
// Generated 2016-3-1 15:00:01 by Hibernate Tools 4.3.1.Final

import java.text.SimpleDateFormat;
import java.util.*;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.spa.model.company.Company;
import org.spa.model.order.PurchaseOrder;
import org.spa.model.shop.Shop;
import org.spa.model.user.Guest;
import org.spa.model.user.User;

import com.spa.constant.CommonConstant;

/**
 * Book generated by hbm2java
 */
@Entity
@Table(name = "BOOK", catalog = "loccitane")
public class Book implements java.io.Serializable {

	/**
	 *
	 */
	private static final long serialVersionUID = 1L;
	private Long id;
	private String reference;
	private Shop shop;
	private User user;
	private Date appointmentTime;
	private int guestAmount;
    private String status;
    private String remarks;
	private boolean isActive;
	private Company company;

	private Date created;
	private String createdBy;
	private Date lastUpdated;
	private String lastUpdatedBy;
	private Set<BookItem> bookItems = new HashSet<BookItem>(0);
	private Set<PurchaseOrder> purchaseOrders = new HashSet<PurchaseOrder>(0);
    private Set<BookFirstStepRecord> bookFirstStepRecords = new HashSet<BookFirstStepRecord>(0);

    private Guest guest;

    /**
     * true代表：just walk-in to the shop without booking,
     * false代表：made a booking in advance and come to the shop
     */
    private Boolean walkIn;
	private Boolean mobilePrepaid;
	private String bookingChannel;

	private Boolean pregnancy;

	private BookBatch bookBatch;
	
	private boolean isAllShareSingleRoom;

	public Book() {
	}

	public Book(Shop shop, User user, Date appointmentTime, int guestAmount, String status, boolean isActive,boolean isAllShareSingleRoom) {
        this.shop = shop;
        this.user = user;
        this.appointmentTime = appointmentTime;
        this.guestAmount = guestAmount;
        this.status = status;
        this.isActive = isActive;
        this.isAllShareSingleRoom = isAllShareSingleRoom;
    }

    public Book(Shop shop, Company company,User user, Date appointmentTime, int guestAmount, String status, String remarks, boolean isActive, Date created,
    		String createdBy, Date lastUpdated, String lastUpdatedBy, Set<BookItem> bookItems, Set<PurchaseOrder> purchaseOrders,String reference,boolean isAllShareSingleRoom) {
        this.shop = shop;
        this.user = user;
        this.appointmentTime = appointmentTime;
        this.guestAmount = guestAmount;
        this.status = status;
        this.remarks = remarks;
        this.isActive = isActive;
        this.created = created;
        this.createdBy = createdBy;
        this.lastUpdated = lastUpdated;
        this.lastUpdatedBy = lastUpdatedBy;
        this.bookItems = bookItems;
        this.purchaseOrders = purchaseOrders;
        this.reference=reference;
        this.company=company;
        this.isAllShareSingleRoom = isAllShareSingleRoom;
    }


	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}
	@Column(name = "reference", nullable = false, length = 45)
	public String getReference() {
		return this.reference;
	}

	public void setReference(String reference) {
		this.reference = reference;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "company_id", nullable = false)
	public Company getCompany() {
		return this.company;
	}

	public void setCompany(Company company) {
		this.company = company;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "shop_id", nullable = false)
	public Shop getShop() {
		return this.shop;
	}

	public void setShop(Shop shop) {
		this.shop = shop;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "user_id", nullable = false)
	public User getUser() {
		return this.user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "appointment_time", nullable = false, length = 19)
	public Date getAppointmentTime() {
		return this.appointmentTime;
	}

	public void setAppointmentTime(Date appointmentTime) {
		this.appointmentTime = appointmentTime;
	}
	@Column(name = "booking_channel", length = 45)
	public String getBookingChannel() {
		return bookingChannel;
	}
	public void setBookingChannel(String bookingChannel) {
		this.bookingChannel = bookingChannel;
	}
	@Column(name = "guest_amount", nullable = false)
	public int getGuestAmount() {
		return this.guestAmount;
	}

	public void setGuestAmount(int guestAmount) {
		this.guestAmount = guestAmount;
	}

    @Column(name = "status", nullable = false, length = 45)
    public String getStatus() {
        return this.status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    @Column(name = "remarks")
    public String getRemarks() {
        return this.remarks;
    }

    public void setRemarks(String remarks) {
        this.remarks = remarks;
    }

	@Column(name = "is_active", nullable = false)
	public boolean isIsActive() {
		return this.isActive;
	}

	public void setIsActive(boolean isActive) {
		this.isActive = isActive;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", length = 19)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Column(name = "created_by", length = 100)
	public String getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_updated", length = 19)
	public Date getLastUpdated() {
		return this.lastUpdated;
	}

	public void setLastUpdated(Date lastUpdated) {
		this.lastUpdated = lastUpdated;
	}

	@Column(name = "last_updated_by", length = 100)
	public String getLastUpdatedBy() {
		return this.lastUpdatedBy;
	}

	public void setLastUpdatedBy(String lastUpdatedBy) {
		this.lastUpdatedBy = lastUpdatedBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "book", cascade = {CascadeType.ALL}, orphanRemoval = true)
	public Set<BookItem> getBookItems() {
		return this.bookItems;
	}

	public void setBookItems(Set<BookItem> bookItems) {
		this.bookItems = bookItems;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "book")
	public Set<PurchaseOrder> getPurchaseOrders() {
		return this.purchaseOrders;
	}

    @Column(name = "walk_in")
    public Boolean getWalkIn() {
        return walkIn;
    }

    public void setWalkIn(Boolean walkIn) {
        this.walkIn = walkIn;
    }

    public void setPurchaseOrders(Set<PurchaseOrder> purchaseOrders) {
		this.purchaseOrders = purchaseOrders;
	}

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "book", cascade = CascadeType.ALL, orphanRemoval = true)
    @OrderBy(value = "displayOrder asc")
    public Set<BookFirstStepRecord> getBookFirstStepRecords() {
        return this.bookFirstStepRecords;
    }

    public void setBookFirstStepRecords(Set<BookFirstStepRecord> bookFirstStepRecords) {
        this.bookFirstStepRecords = bookFirstStepRecords;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "guest_id")
    public Guest getGuest() {
        return this.guest;
    }

    public void setGuest(Guest guest) {
        this.guest = guest;
    }
	@Column(name = "mobile_prepaid", nullable = false)
	public Boolean getMobilePrepaid() {
		return mobilePrepaid;
	}

	@Column(name = "pregnancy")
	public Boolean getPregnancy() {
		return pregnancy;
	}
	
	
	@Column(name = "is_all_share_single_room", nullable = false)
	public boolean isAllShareSingleRoom() {
		return this.isAllShareSingleRoom;
	}

	public void setAllShareSingleRoom(boolean isAllShareSingleRoom) {
		this.isAllShareSingleRoom = isAllShareSingleRoom;
	}

	public void setPregnancy(Boolean pregnancy) {
		this.pregnancy = pregnancy;
	}

	public void setMobilePrepaid(Boolean mobilePrepaid) {
		this.mobilePrepaid = mobilePrepaid;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "book_batch_id", nullable = false)
	public BookBatch getBookBatch() {
		return bookBatch;
	}
	public void setBookBatch(BookBatch bookBatch) {
		this.bookBatch = bookBatch;
	}

	 @Transient
	 public Boolean getHasMoreThanOneBookItemCanBePaid(){
		 Boolean has=false;
		 for(BookItem bi : bookItems){
			 if(CommonConstant.checkOutStatusList.contains(bi.getStatus())){
				 has=true;
				 break;
			 }
		 }
		 return has;
	 }

    @Transient
    public boolean canChangeStatus() {
        Set<String> statusSet = new HashSet<>();
        for (BookItem bookItem : bookItems) {
            if (CommonConstant.releaseResourceStatusList.contains(bookItem.getStatus())) {
                return false;
            }
            statusSet.add(bookItem.getStatus());
        }

        // 全部item的状态一致才可以修改
        return statusSet.size() == 1;
    }

	@Transient
	public String getAppointmentDateFormat(){
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		return sdf.format(this.getAppointmentTime());
	}
}