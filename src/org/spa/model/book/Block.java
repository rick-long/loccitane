package org.spa.model.book;
// Generated 2016-7-6 17:22:10 by Hibernate Tools 4.3.1

import static javax.persistence.GenerationType.IDENTITY;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.quartz.CronExpression;
import org.spa.model.shop.OpeningHours;
import org.spa.model.shop.Room;
import org.spa.model.shop.Shop;
import org.spa.model.user.User;
import org.spa.utils.DateUtil;
import org.spa.vo.book.CellVO;
import org.spa.vo.common.DateTimeRangeVO;

import com.spa.constant.CommonConstant;

/**
 * Block generated by hbm2java
 */
@Entity
@Table(name = "BLOCK", catalog = "loccitane")
public class Block implements java.io.Serializable {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Long id;
    private Room room;
    private Shop shop;
    private User user;
    private Date startDate;
    private Date endDate;
    private String startTime;
    private String endTime;
    private String cronExpression;
    private String type;
    private String remarks;
    private boolean isActive;
    private Date created;
    private String createdBy;
    private Date lastUpdated;
    private String lastUpdatedBy;
    private String repeatType;
    private Set<BlockItem> blockItems = new HashSet<BlockItem>(0);

    /**
     * 表示该block是否过期，如果是1表示永不过期
     */
    private Boolean neverExpired;

    public Block() {
    }

    public Block(User user, Date startDate, Date endDate) {
        this.user = user;
        this.startDate = startDate;
        this.endDate = endDate;
    }

    public Block(Room room, Date startDate, Date endDate) {
        this.room = room;
        this.startDate = startDate;
        this.endDate = endDate;
    }

    public Block(Shop shop, Date startDate, Date endDate, String type, boolean isActive) {
        this.shop = shop;
        this.startDate = startDate;
        this.endDate = endDate;
        this.type = type;
        this.isActive = isActive;
    }

    public Block(Room room, Shop shop, User user, Date startDate, Date endDate, String startTime, String endTime, String cronExpression, String type, String remarks, boolean isActive, Date created, String createdBy, Date lastUpdated, String lastUpdatedBy, String repeatType,
                 Set<BlockItem> blockItems) {
        this.room = room;
        this.shop = shop;
        this.user = user;
        this.startDate = startDate;
        this.endDate = endDate;
        this.startTime = startTime;
        this.endTime = endTime;
        this.cronExpression = cronExpression;
        this.type = type;
        this.remarks = remarks;
        this.isActive = isActive;
        this.created = created;
        this.createdBy = createdBy;
        this.lastUpdated = lastUpdated;
        this.lastUpdatedBy = lastUpdatedBy;
        this.repeatType = repeatType;
        this.blockItems = blockItems;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "id", unique = true, nullable = false)
    public Long getId() {
        return this.id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "room_id")
    public Room getRoom() {
        return this.room;
    }

    public void setRoom(Room room) {
        this.room = room;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "shop_id", nullable = false)
    public Shop getShop() {
        return this.shop;
    }

    public void setShop(Shop shop) {
        this.shop = shop;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id")
    public User getUser() {
        return this.user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "start_date", nullable = false, length = 19)
    public Date getStartDate() {
        return this.startDate;
    }

    public void setStartDate(Date startDate) {
        this.startDate = startDate;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "end_date", nullable = false, length = 19)
    public Date getEndDate() {
        return this.endDate;
    }

    public void setEndDate(Date endDate) {
        this.endDate = endDate;
    }

    @Column(name = "start_time", length = 10)
    public String getStartTime() {
        return this.startTime;
    }

    public void setStartTime(String startTime) {
        this.startTime = startTime;
    }

    @Column(name = "end_time", length = 10)
    public String getEndTime() {
        return this.endTime;
    }

    public void setEndTime(String endTime) {
        this.endTime = endTime;
    }

    @Column(name = "cron_expression")
    public String getCronExpression() {
        return this.cronExpression;
    }

    public void setCronExpression(String cronExpression) {
        this.cronExpression = cronExpression;
    }

    @Column(name = "type", nullable = false, length = 45)
    public String getType() {
        return this.type;
    }

    public void setType(String type) {
        this.type = type;
    }

    @Column(name = "remarks")
    public String getRemarks() {
        return this.remarks;
    }

    public void setRemarks(String remarks) {
        this.remarks = remarks;
    }

    @Column(name = "is_active", nullable = false)
    public boolean isIsActive() {
        return this.isActive;
    }

    public void setIsActive(boolean isActive) {
        this.isActive = isActive;
    }

    @Column(name = "never_expired")
    public Boolean getNeverExpired() {
        return neverExpired;
    }

    public void setNeverExpired(Boolean neverExpired) {
        this.neverExpired = neverExpired;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "created", length = 19)
    public Date getCreated() {
        return this.created;
    }

    public void setCreated(Date created) {
        this.created = created;
    }

    @Column(name = "created_by", length = 100)
    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "last_updated", length = 19)
    public Date getLastUpdated() {
        return this.lastUpdated;
    }

    public void setLastUpdated(Date lastUpdated) {
        this.lastUpdated = lastUpdated;
    }

    @Column(name = "last_updated_by", length = 100)
    public String getLastUpdatedBy() {
        return this.lastUpdatedBy;
    }

    public void setLastUpdatedBy(String lastUpdatedBy) {
        this.lastUpdatedBy = lastUpdatedBy;
    }

    @Column(name = "repeat_type", length = 45)
    public String getRepeatType() {
        return this.repeatType;
    }

    public void setRepeatType(String repeatType) {
        this.repeatType = repeatType;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "block", cascade = CascadeType.ALL, orphanRemoval = true)
    public Set<BlockItem> getBlockItems() {
        return this.blockItems;
    }

    public void setBlockItems(Set<BlockItem> blockItems) {
        this.blockItems = blockItems;
    }

    @Override
    public String toString() {
        return "Block [getId()=" + getId() + ", getRoom()=" + getRoom() + ", getShop()=" + getShop() + ", getUser()=" + getUser() + ", getStartDate()=" + getStartDate() + ", getEndDate()=" + getEndDate() + ", getStartTime()=" + getStartTime() + ", getEndTime()=" + getEndTime() + ", getCronExpression()="
                + getCronExpression() + ", getType()=" + getType() + ", getRemarks()=" + getRemarks() + "]";
    }

    @Transient
    public boolean isNotRepeat() {
        return CommonConstant.BLOCK_REPEAT_TYPE_NONE.equals(getRepeatType()) || getRoom() != null;
    }

    /**
     * 获取block指定日期的block时间段
     *
     * @param currentDate
     * @return
     */
    public DateTimeRangeVO getTimeRange(Date currentDate) {
        DateTime currentDateTime = new DateTime(currentDate).withTimeAtStartOfDay();
        Set<BlockItem> blockItemSet = getBlockItems();
        if (!blockItemSet.isEmpty()) {
            for (BlockItem blockItem : getBlockItems()) {
                // 找到同年，同月，同日，时分秒不一定相同
                DateTime startTime = new DateTime(blockItem.getStartTime());
                if (DateUtil.sameDay(currentDateTime, startTime)) {
                    if(blockItem.isCancel()) {
                        return null; // currentDate 取消block, 返回null
                    }
                    return new DateTimeRangeVO(startTime, new DateTime(blockItem.getEndTime()));
                }
            }
        }
        if (!isNotRepeat()) {
            try {
                // 返回重複的開始時間和結束時間
                CronExpression cronExpression = new CronExpression(getCronExpression());
                if (cronExpression.isSatisfiedBy(currentDate)) {
                    DateTimeFormatter dtf = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm");
                    String dateString = currentDateTime.toString("yyyy-MM-dd ");
                    DateTime startTime = dtf.parseDateTime(dateString + getStartTime());
                    DateTime endTime = dtf.parseDateTime(dateString + getEndTime());
                    OpeningHours openingHours = getShop().getOpeningHour(currentDate);
                    startTime = openingHours.getClosestStartTime(startTime);
                    endTime = openingHours.getClosestEndTime(endTime);
                    return new DateTimeRangeVO(startTime, endTime);
                }
            } catch (ParseException e) {
                e.printStackTrace();
            }
        }
        return null;
    }

    public Block cloneBlock() {
        Block newBlock = new Block();
        newBlock.setRoom(getRoom());
        newBlock.setShop(getShop());
        newBlock.setUser(getUser());
        newBlock.setStartDate(getStartDate());
        newBlock.setEndDate(getEndDate());
        newBlock.setStartTime(getStartTime());
        newBlock.setEndTime(getEndTime());
        newBlock.setCronExpression(getCronExpression());
        newBlock.setType(getType());
        newBlock.setRemarks(getRemarks());
        newBlock.setIsActive(isIsActive());
        newBlock.setCreated(getCreated());
        newBlock.setCreatedBy(getCreatedBy());
        newBlock.setLastUpdated(getLastUpdated());
        newBlock.setLastUpdatedBy(getLastUpdatedBy());
        newBlock.setRepeatType(getRepeatType());
       /* for(BlockItem blockItem : getBlockItems()) {
            BlockItem newItem = new BlockItem();
            newItem.setBlock(newBlock);
            newItem.setStartTime(blockItem.getStartTime());
            newItem.setEndTime(blockItem.getEndTime());
            newItem.setDays(blockItem.getDays());
            newItem.setPaidType(blockItem.getPaidType());
            newItem.setIsActive(blockItem.isIsActive());
            newItem.setCreated(blockItem.getCreated());
            newItem.setCreatedBy(blockItem.getCreatedBy());
            newItem.setLastUpdated(blockItem.getLastUpdated());
            newItem.setLastUpdatedBy(blockItem.getLastUpdatedBy());
            newItem.setStatus(blockItem.getStatus());
            newBlock.getBlockItems().add(newItem);
        }*/
        return newBlock;
    }

    public List<CellVO> transferToCell(Date currentDate) {
        List<CellVO> cellVOList = new ArrayList<>();
        DateTimeRangeVO dateTimeRangeVO = getTimeRange(currentDate);
        if (dateTimeRangeVO == null) {
            return cellVOList;
        }
        DateTime maxStartDateTime = dateTimeRangeVO.getStart();
        DateTime minEndDateTime = dateTimeRangeVO.getEnd();
        System.out.println("BlockStartTime:" + maxStartDateTime);
        System.out.println("BlockEndTime:" + minEndDateTime);
        CellVO parent = null;
        while (maxStartDateTime.isBefore(minEndDateTime)) {
            CellVO cellVO = new CellVO();
            cellVO.setBlock(this);
            cellVO.setTime(maxStartDateTime);
            if (parent == null) {
                parent = cellVO;
                parent.setParent(null);
            } else {
                cellVO.setParent(parent); // set parent
                parent.getChildren().add(cellVO);
            }
            cellVO.setShop(getShop());
            cellVO.setTherapist(getUser());
            cellVO.setRoom(getRoom());
            cellVOList.add(cellVO);
            maxStartDateTime = maxStartDateTime.plusMinutes(CommonConstant.TIME_UNIT); // 时间递增
        }
        return cellVOList;
    }
}
