package org.spa.model.book;
// Generated 2016-3-1 16:24:20 by Hibernate Tools 4.3.1.Final

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import com.spa.constant.CommonConstant;
import org.apache.commons.lang3.StringUtils;
import org.joda.time.DateTime;
import org.spa.model.product.ProductOption;
import org.spa.model.shop.Room;
import org.spa.model.user.User;
import org.spa.serviceImpl.book.BookItemServiceImpl;
import org.spa.utils.I18nUtil;
import org.spa.utils.SpringUtil;
import org.spa.vo.book.CellVO;

/**
 * BookItem generated by hbm2java
 */
@Entity
@Table(name = "BOOK_ITEM", catalog = "loccitane")
public class BookItem implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Long id;
	private Book book;
    /**
     * 自关联id， 解决share room的问题(把share room 的bookItem用这个关联起来).
     */
    private BookItem bookItem;
    private Set<BookItem> bookItems = new HashSet<BookItem>(0);
	private ProductOption productOption;
    private Room room;
    private Date appointmentTime;
    /**
     * 预约结束时间， 包含了duration和process time
     */
    private Date appointmentEndTime;
    private String productName;
    private double price;
	private int duration;
    /**
     * 收拾房间时间.
     */
    private int processTime;
    private String status;
	private boolean isActive;
	private Date created;
	private String createdBy;
	private Date lastUpdated;
	private String lastUpdatedBy;
    private Boolean onRequest;
    
    //double booking 
    private Boolean isDoubleBooking;
    private Long doubleBookingParentId;
    
    private Long bundleId;
    
	private Set<BookItemTherapist> bookItemTherapists = new HashSet<BookItemTherapist>(0);
	private Set<Resource> resources = new HashSet<Resource>(0);

	public BookItem() {
	}

    public BookItem(Book book, ProductOption productOption, Date appointmentTime, Date appointmentEndTime, String productName, double price, int duration, int processTime, String status, boolean isActive, Date created, String createdBy, Date lastUpdated, String lastUpdatedBy) {
        this.book = book;
        this.productOption = productOption;
        this.appointmentTime = appointmentTime;
        this.appointmentEndTime = appointmentEndTime;
        this.productName = productName;
        this.price = price;
        this.duration = duration;
        this.processTime = processTime;
        this.status = status;
        this.isActive = isActive;
        this.created = created;
        this.createdBy = createdBy;
        this.lastUpdated = lastUpdated;
        this.lastUpdatedBy = lastUpdatedBy;
    }

    public BookItem(Book book, ProductOption productOption, Room room, Date appointmentTime, Date appointmentEndTime, String productName, double price, int duration, int processTime, String status, boolean isActive, Date created, String createdBy, Date lastUpdated, String lastUpdatedBy, Boolean onRequest,
                    Set<BookItemTherapist> bookItemTherapists, Set<Resource> resources) {
        this.book = book;
        this.productOption = productOption;
        this.room = room;
        this.appointmentTime = appointmentTime;
        this.appointmentEndTime = appointmentEndTime;
        this.productName = productName;
        this.price = price;
        this.duration = duration;
        this.processTime = processTime;
        this.status = status;
        this.isActive = isActive;
        this.created = created;
        this.createdBy = createdBy;
        this.lastUpdated = lastUpdated;
        this.lastUpdatedBy = lastUpdatedBy;
        this.onRequest = onRequest;
        this.bookItemTherapists = bookItemTherapists;
        this.resources = resources;
    }

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "book_id", nullable = false)
	public Book getBook() {
		return this.book;
	}

	public void setBook(Book book) {
		this.book = book;
	}

    @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    @JoinColumn(name = "parent_id")
    public BookItem getBookItem() {
        return this.bookItem;
    }

    public void setBookItem(BookItem bookItem) {
        this.bookItem = bookItem;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "bookItem", cascade = CascadeType.ALL)
    public Set<BookItem> getBookItems() {
        return this.bookItems;
    }

    public void setBookItems(Set<BookItem> bookItems) {
        this.bookItems = bookItems;
    }

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "product_option_id", nullable = false)
	public ProductOption getProductOption() {
		return this.productOption;
	}

	public void setProductOption(ProductOption productOption) {
		this.productOption = productOption;
	}

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "room_id", nullable = true)
    public Room getRoom() {
        return this.room;
    }

    public void setRoom(Room room) {
        this.room = room;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "appointment_time", nullable = false, length = 19)
    public Date getAppointmentTime() {
        return this.appointmentTime;
    }

    public void setAppointmentTime(Date appointmentTime) {
        this.appointmentTime = appointmentTime;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "appointment_end_time", nullable = false, length = 19)
    public Date getAppointmentEndTime() {
        return this.appointmentEndTime;
    }

    public void setAppointmentEndTime(Date appointmentEndTime) {
        this.appointmentEndTime = appointmentEndTime;
    }

    @Column(name = "product_name", nullable = false, length = 100)
    public String getProductName() {
        return this.productName;
    }

    public void setProductName(String productName) {
        this.productName = productName;
    }

    @Column(name = "price", nullable = false, precision = 22, scale = 0)
    public double getPrice() {
        return this.price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

	@Column(name = "duration", nullable = false)
	public int getDuration() {
		return this.duration;
	}

	public void setDuration(int duration) {
		this.duration = duration;
	}

    @Column(name = "process_time", nullable = false)
    public int getProcessTime() {
        return this.processTime;
    }

    public void setProcessTime(int processTime) {
        this.processTime = processTime;
    }

    @Column(name = "status", nullable = false, length = 45)
    public String getStatus() {
        return this.status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

	@Column(name = "is_active", nullable = false)
	public boolean isIsActive() {
		return this.isActive;
	}

	public void setIsActive(boolean isActive) {
		this.isActive = isActive;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", length = 19)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Column(name = "created_by", length = 100)
	public String getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_updated", length = 19)
	public Date getLastUpdated() {
		return this.lastUpdated;
	}

	public void setLastUpdated(Date lastUpdated) {
		this.lastUpdated = lastUpdated;
	}

	@Column(name = "last_updated_by", length = 100)
	public String getLastUpdatedBy() {
		return this.lastUpdatedBy;
	}

	public void setLastUpdatedBy(String lastUpdatedBy) {
		this.lastUpdatedBy = lastUpdatedBy;
	}

    @Column(name = "on_request")
    public Boolean getOnRequest() {
        return this.onRequest;
    }

    public void setOnRequest(Boolean onRequest) {
        this.onRequest = onRequest;
    }

    @Column(name = "is_double_booking")
    public Boolean getIsDoubleBooking() {
		return isDoubleBooking;
	}
    public void setIsDoubleBooking(Boolean isDoubleBooking) {
		this.isDoubleBooking = isDoubleBooking;
	}
    
    @Column(name = "double_booking_parent_id")
    public Long getDoubleBookingParentId() {
    	return doubleBookingParentId;
    }
    public void setDoubleBookingParentId(Long doubleBookingParentId) {
		this.doubleBookingParentId = doubleBookingParentId;
	}
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "bookItem", cascade = CascadeType.ALL, orphanRemoval = true)
    public Set<BookItemTherapist> getBookItemTherapists() {
        return this.bookItemTherapists;
    }

    public void setBookItemTherapists(Set<BookItemTherapist> bookItemTherapists) {
        this.bookItemTherapists = bookItemTherapists;
    }

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "bookItem", cascade = {CascadeType.ALL}, orphanRemoval=true)
	public Set<Resource> getResources() {
		return this.resources;
	}

	public void setResources(Set<Resource> resources) {
		this.resources = resources;
	}
	 
	@Column(name = "bundle_id")
	public Long getBundleId() {
		return bundleId;
	}
	public void setBundleId(Long bundleId) {
		this.bundleId = bundleId;
	}
    @Transient
    public List<User> getTherapistList() {
        return bookItemTherapists.stream().map(e->e.getUser()).collect(Collectors.toList());
    }

    @Transient
    public String getTherapists() {
        return StringUtils.join(bookItemTherapists.stream().map(e->e.getUser().getDisplayName()).collect(Collectors.toList()), ",");
        //return StringUtils.join(bookItemTherapists.stream().map()).collect(Collectors.toList()), ",");
    }

    @Transient
    public String getTherapistIds() {
        return StringUtils.join(bookItemTherapists.stream().map(e->e.getUser().getId()).collect(Collectors.toList()), ",");
    }

    @Transient
    public String getTherapistNames() {
        return StringUtils.join(bookItemTherapists.stream().map(e->e.getUser().getDisplayName()).collect(Collectors.toList()), ",");
    }

    @Transient
    public int getResourceSize() {
        return duration / CommonConstant.TIME_UNIT;
    }

    @Transient
    public Boolean getBookItemWhetherCanBeCheckout(){
    	Boolean isCheckOut=Boolean.FALSE;
    	if(CommonConstant.checkOutStatusList.contains(getStatus())){
    		isCheckOut=Boolean.TRUE;
    	}
    	return isCheckOut;
    }
    @Override
    public String toString() {
        return "BookItem{" +
                "id=" + id +
                ", price=" + price +
                ", duration=" + duration +
                ", status='" + status + '\'' +
                ", appointmentTime=" + appointmentTime +
                ", productName='" + productName + '\'' +
                '}';
    }

    @Transient
    public boolean isWaiting() {
        return CommonConstant.BOOK_STATUS_WAITING.equals(getStatus());
    }


    /**
     * 转换成单元格
     *
     * @return
     */
    @Transient
    public List<CellVO> transferToCell() {
        List<CellVO> cellVOList = new ArrayList<>();
        for (BookItemTherapist itemTherapist : getBookItemTherapists()) {
            DateTime startTime = new DateTime(getAppointmentTime());
            DateTime endTime = new DateTime(getAppointmentEndTime()).plusMinutes(getProductOption().getProcessTime());
//            System.out.println("startTime---"+startTime+"---endTime--"+endTime);
            CellVO parent = null;
            List<CellVO> children = new ArrayList<>();
            while (startTime.isBefore(endTime)) {
                CellVO cellVO = new CellVO();
                cellVO.setBookItem(this);
                cellVO.setTime(startTime);
                cellVO.setOnRequest(itemTherapist.getOnRequest());
                cellVO.setTherapist(itemTherapist.getUser());
                cellVO.setRoom(getRoom());
                if (parent == null) {
                    cellVO.setParent(null);
                    cellVO.setChildren(children);
                    parent = cellVO; // 这个是parent
                } else {
                    cellVO.setParent(parent); // set parent
                    children.add(cellVO);
                }
                cellVOList.add(cellVO);
                startTime = startTime.plusMinutes(CommonConstant.TIME_UNIT); // 时间递增
            }
        }
        return cellVOList;
    }

    /**
     * 判斷time是否被block
     *
     * @param time
     * @return
     */
    @Transient
    public boolean isTimeBlock(Date time) {
        return time.equals(getAppointmentTime()) || (time.after(getAppointmentTime()) && time.before(getAppointmentEndTime()));
    }
    
    @Transient
    public Boolean getRequestedOfFirstTherapist(){
    	Boolean isRequested=false;
    	Iterator<BookItemTherapist> it= getBookItemTherapists().iterator();
    	while(it.hasNext()){
    		BookItemTherapist bit = it.next();
    		isRequested = bit.getOnRequest();
    	}
    	return isRequested;
    }
    
    @Transient
    public List<BookItem> getChildrenOfDoubleBooking(){
    	List<BookItem> childrenOfDoubleBooking = new ArrayList<BookItem>();
    	BookItemServiceImpl biImpl = SpringUtil.getBean(BookItemServiceImpl.class);
    	childrenOfDoubleBooking = biImpl.getChildrenOfDoubleBooking(this.getId());
    	return childrenOfDoubleBooking;
    }
    
    @Transient
    public Boolean getRequestedOfTherapist(Long therapistId){
    	Boolean isRequested=false;
    	Iterator<BookItemTherapist> it= getBookItemTherapists().iterator();
    	while(it.hasNext()){
    		BookItemTherapist bit = it.next();
    		if(bit.getUser().getId() == therapistId){
    			return  bit.getOnRequest() !=null ?  bit.getOnRequest() : false;
    		}
    	}
    	return isRequested;
    }

    @Transient
    public String getAppointmentTimeFormat(){
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
        return sdf.format(this.getAppointmentTime());
    }

    @Transient
    public String getAppointmentEndTimeFormat(){
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
        return sdf.format(this.getAppointmentEndTime());
    }
    @Transient
    public String getProdNameWithFinalPrice() {
    	StringBuffer sb =new StringBuffer();
    	sb.append(getProductOption().getProduct().getName()).append("<br/>(");
    	sb.append(getProductOption().getDuration()).append(I18nUtil.getMessageKey("label.unit.mins")).append(",");
    	sb.append(I18nUtil.getMessageKey("label.currency.default")).append(getProductOption().getFinalPrice(getBook().getShop().getId()));
    	sb.append(")");
    	
        return sb.toString();
    }
}
