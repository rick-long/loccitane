package org.spa.model.shop;
// Generated 2016-3-31 15:50:45 by Hibernate Tools 4.3.1.Final

import com.spa.constant.CommonConstant;
import org.apache.commons.lang3.StringUtils;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Where;
import org.joda.time.DateTime;
import org.spa.model.Holiday;
import org.spa.model.awardRedemption.AwardRedemption;
import org.spa.model.book.Book;
import org.spa.model.book.Resource;
import org.spa.model.bundle.ProductBundle;
import org.spa.model.company.Company;
import org.spa.model.inventory.InventoryTransaction;
import org.spa.model.inventory.InventoryWarehouse;
import org.spa.model.order.PurchaseOrder;
import org.spa.model.prepaid.Prepaid;
import org.spa.model.prepaid.PrepaidTopUpTransaction;
import org.spa.model.product.Product;
import org.spa.model.product.ProductOptionSupernumeraryPrice;
import org.spa.model.staff.StaffHomeShopDetails;
import org.spa.model.staff.StaffInOrOut;
import org.spa.model.user.ConsentFormUser;
import org.spa.model.user.User;
import org.spa.service.HolidayService;
import org.spa.service.user.ConsentFormUserService;
import org.spa.serviceImpl.HolidayServiceImpl;
import org.spa.serviceImpl.user.ConsentFormUserServiceImpl;
import org.spa.utils.SpringUtil;

import javax.persistence.*;
import java.util.*;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * Shop generated by hbm2java
 */
@Entity
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
@Table(name = "SHOP", catalog = "loccitane")
public class Shop implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Long id;
	private Company company;
	private String name;
	private String reference; // if the reference is "ONLINE", it is a online shop but not a location.
	private String email;
	
	private String remarks;
	private boolean isOnline;// if yes , the shop will do some business online.
	private boolean isActive;
	private Date created;
	private String createdBy;
	private Date lastUpdated;
	private String lastUpdatedBy;
	private OutSourceTemplate outSourceTemplate;
	
	private Set<Address> addresses = new HashSet<Address>(0);
	// this is for member,one home shop has multi members
	private Set<User> users = new HashSet<User>(0);
	private Set<Phone> phones = new HashSet<Phone>(0);
    private Set<Resource> resources = new HashSet<Resource>(0);
	private Set<Room> rooms = new HashSet<Room>(0);
	private Set<OpeningHours> openingHourses = new HashSet<OpeningHours>(0);
    private Set<InventoryTransaction> inventoryTransactions = new HashSet<InventoryTransaction>(0);
    private Set<InventoryWarehouse> inventoryWarehouses = new HashSet<InventoryWarehouse>(0);
    private Set<Book> books = new HashSet<Book>(0);
	private Set<ProductOptionSupernumeraryPrice> productOptionSupernumeraryPrices = new HashSet<ProductOptionSupernumeraryPrice>(0);
	private Set<Prepaid> prepaids = new HashSet<Prepaid>(0);
	private Set<PrepaidTopUpTransaction> prepaidTopUpTransactions = new HashSet<PrepaidTopUpTransaction>(0);
	private Set<PurchaseOrder> purchaseOrders = new HashSet<PurchaseOrder>(0);
	private Set<AwardRedemption> awardRedemptions = new HashSet<AwardRedemption>(0);
	private Set<Product> products=new HashSet<Product>(0);
	private Set<ConsentFormUser> consentFormUsers = new HashSet<ConsentFormUser>(0);
	private Set<StaffHomeShopDetails> staffHomeShopDetailses = new HashSet<StaffHomeShopDetails>(0);
	// this is for staff: many to many
	private Set<User> staffs = new HashSet<User>(0);

	private Set<ProductBundle> productBundles = new HashSet<ProductBundle>(0);
	
	private String prefix;
	
    private Long oldId;
	private boolean showOnlineBooking;
	public Shop() {
	}

    public Shop(Company company, String reference, boolean isOnline, boolean isActive) {
        this.company = company;
        this.reference = reference;
        this.isOnline = isOnline;
        this.isActive = isActive;
    }

    public Shop(Company company, String name, String reference, String remarks, boolean isOnline, boolean isActive, Date created, String createdBy, Date lastUpdated, String lastUpdatedBy, Set<User> users, Set<ProductOptionSupernumeraryPrice> productOptionSupernumeraryPrices, Set<Prepaid> prepaids,
                Set<PurchaseOrder> purchaseOrders, Set<PrepaidTopUpTransaction> prepaidTopUpTransactions, Set<Address> addresses, Set<Phone> phones, Set<Resource> resources, Set<Room> rooms, Set<OpeningHours> openingHourses, Set<InventoryTransaction> inventoryTransactions, Set<InventoryWarehouse> inventoryWarehouses,
                Set<Book> books,Set<AwardRedemption> awardRedemptions,Set<ConsentFormUser> consentFormUsers,OutSourceTemplate outSourceTemplate,Set<User> staffs,String email,String prefix, Set<Product> products ) {
        this.company = company;
        this.name = name;
        this.reference = reference;
        this.remarks = remarks;
        this.isOnline = isOnline;
        this.isActive = isActive;
        this.created = created;
        this.createdBy = createdBy;
        this.lastUpdated = lastUpdated;
        this.lastUpdatedBy = lastUpdatedBy;
        this.users = users;
        this.productOptionSupernumeraryPrices = productOptionSupernumeraryPrices;
        this.prepaids = prepaids;
        this.purchaseOrders = purchaseOrders;
        this.prepaidTopUpTransactions = prepaidTopUpTransactions;
        this.addresses = addresses;
        this.phones = phones;
        this.resources = resources;
        this.rooms = rooms;
        this.openingHourses = openingHourses;
        this.inventoryTransactions = inventoryTransactions;
        this.inventoryWarehouses = inventoryWarehouses;
        this.books = books;
        this.awardRedemptions=awardRedemptions;
        this.consentFormUsers=consentFormUsers;
        this.outSourceTemplate=outSourceTemplate;
        this.staffs=staffs;
        this.email=email;
        this.prefix=prefix;
        this.products=products;
    }

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "company_id", nullable = false)
	public Company getCompany() {
		return this.company;
	}

	public void setCompany(Company company) {
		this.company = company;
	}

	@Column(name = "name", length = 100)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "reference", nullable = false, length = 50)
	public String getReference() {
		return this.reference;
	}

	public void setReference(String reference) {
		this.reference = reference;
	}

	@Column(name = "remarks")
	public String getRemarks() {
		return this.remarks;
	}

	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}

	@Column(name = "is_online", nullable = false)
	public boolean isIsOnline() {
		return this.isOnline;
	}

	public void setIsOnline(boolean isOnline) {
		this.isOnline = isOnline;
	}

	@Column(name = "is_active", nullable = false)
	public boolean isIsActive() {
		return this.isActive;
	}

	public void setIsActive(boolean isActive) {
		this.isActive = isActive;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "out_source_template_id")
	public OutSourceTemplate getOutSourceTemplate() {
		return this.outSourceTemplate;
	}

	public void setOutSourceTemplate(OutSourceTemplate outSourceTemplate) {
		this.outSourceTemplate = outSourceTemplate;
	}
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", length = 19)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Column(name = "created_by", length = 100)
	public String getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_updated", length = 19)
	public Date getLastUpdated() {
		return this.lastUpdated;
	}

	public void setLastUpdated(Date lastUpdated) {
		this.lastUpdated = lastUpdated;
	}

	@Column(name = "last_updated_by", length = 100)
	public String getLastUpdatedBy() {
		return this.lastUpdatedBy;
	}

	public void setLastUpdatedBy(String lastUpdatedBy) {
		this.lastUpdatedBy = lastUpdatedBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "shop")
	public Set<Address> getAddresses() {
		return this.addresses;
	}

	public void setAddresses(Set<Address> addresses) {
		this.addresses = addresses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "shop")
	public Set<User> getUsers() {
		return this.users;
	}

	public void setUsers(Set<User> users) {
		this.users = users;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "shop")
	public Set<Phone> getPhones() {
		return this.phones;
	}

	public void setPhones(Set<Phone> phones) {
		this.phones = phones;
	}

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "shop")
    public Set<Resource> getResources() {
        return this.resources;
    }

    public void setResources(Set<Resource> resources) {
        this.resources = resources;
    }

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "shop")
	public Set<Room> getRooms() {
		return this.rooms;
	}

	public void setRooms(Set<Room> rooms) {
		this.rooms = rooms;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "shop")
	@OrderBy(value = "id asc")
	public Set<OpeningHours> getOpeningHourses() {
		return this.openingHourses;
	}

	public void setOpeningHourses(Set<OpeningHours> openingHourses) {
		this.openingHourses = openingHourses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "shop")
	public Set<InventoryTransaction> getInventoryTransactions() {
		return this.inventoryTransactions;
	}

	public void setInventoryTransactions(Set<InventoryTransaction> inventoryTransactions) {
		this.inventoryTransactions = inventoryTransactions;
	}

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "shop")
    public Set<InventoryWarehouse> getInventoryWarehouses() {
        return this.inventoryWarehouses;
    }

    public void setInventoryWarehouses(Set<InventoryWarehouse> inventoryWarehouses) {
        this.inventoryWarehouses = inventoryWarehouses;
    }

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "shop")
	public Set<Book> getBooks() {
		return this.books;
	}

	public void setBooks(Set<Book> books) {
		this.books = books;
	}
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "shop")
	public Set<ProductOptionSupernumeraryPrice> getProductOptionSupernumeraryPrices() {
		return this.productOptionSupernumeraryPrices;
	}

	public void setProductOptionSupernumeraryPrices(
			Set<ProductOptionSupernumeraryPrice> productOptionSupernumeraryPrices) {
		this.productOptionSupernumeraryPrices = productOptionSupernumeraryPrices;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "shop")
	public Set<Prepaid> getPrepaids() {
		return this.prepaids;
	}

	public void setPrepaids(Set<Prepaid> prepaids) {
		this.prepaids = prepaids;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "shop")
	public Set<PurchaseOrder> getPurchaseOrders() {
		return this.purchaseOrders;
	}

	public void setPurchaseOrders(Set<PurchaseOrder> purchaseOrders) {
		this.purchaseOrders = purchaseOrders;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "shop")
	public Set<PrepaidTopUpTransaction> getPrepaidTopUpTransactions() {
		return prepaidTopUpTransactions;
	}
	public void setPrepaidTopUpTransactions(Set<PrepaidTopUpTransaction> prepaidTopUpTransactions) {
		this.prepaidTopUpTransactions = prepaidTopUpTransactions;
	}
	
	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "product_bundle_shop", catalog = "loccitane", joinColumns = {
			@JoinColumn(name = "shop_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "product_bundle_id", nullable = false, updatable = false) })
	public Set<ProductBundle> getProductBundles() {
		return productBundles;
	}
	public void setProductBundles(Set<ProductBundle> productBundles) {
		this.productBundles = productBundles;
	}
	
	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "AWARD_REDEEM_LOCATION_SHOP", catalog = "loccitane", joinColumns = {
			@JoinColumn(name = "shop_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "award_redemption_id", nullable = false, updatable = false) })
	public Set<AwardRedemption> getAwardRedemptions() {
		return this.awardRedemptions;
	}
	public void setAwardRedemptions(Set<AwardRedemption> awardRedemptions) {
		this.awardRedemptions = awardRedemptions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "shop")
	public Set<ConsentFormUser> getConsentFormUsers() {
		return this.consentFormUsers;
	}

	public void setConsentFormUsers(Set<ConsentFormUser> consentFormUsers) {
		this.consentFormUsers = consentFormUsers;
	}


	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "shop_product", catalog = "loccitane", joinColumns = { @JoinColumn(name = "shop_id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "product_id", nullable = false, updatable = false) })
	public Set<Product> getProducts() {
		return this.products;
	}

	public void setProducts(Set<Product> products) {
		this.products = products;
	}


	@ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "staff_home_shop", catalog = "loccitane", joinColumns = { 
    		@JoinColumn(name = "shop_id", nullable = false, updatable = false) }, inverseJoinColumns = { 
    				@JoinColumn(name = "staff_id", nullable = false, updatable = false) })
	public Set<User> getStaffs() {
		return staffs;
	}
	public void setStaffs(Set<User> staffs) {
		this.staffs = staffs;
	}

    @Column(name = "old_id")
    public Long getOldId() {
        return this.oldId;
    }

    public void setOldId(Long oldId) {
        this.oldId = oldId;
    }

	@Column(name = "email", length =100)
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	
	@Column(name = "prefix", length = 100)
	public String getPrefix() {
		return prefix;
	}
	public void setPrefix(String prefix) {
		this.prefix = prefix;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "shop")
	@Where(clause = "is_active=1")
	@OrderBy(value = "sort asc")
	public Set<StaffHomeShopDetails> getStaffHomeShopDetailses() {
		return this.staffHomeShopDetailses;
	}

	public void setStaffHomeShopDetailses(Set<StaffHomeShopDetails> staffHomeShopDetailses) {
		this.staffHomeShopDetailses = staffHomeShopDetailses;
	}
	@Column(name = "show_online_booking", nullable = false)
	public boolean isShowOnlineBooking() {
		return showOnlineBooking;
	}

	public void setShowOnlineBooking(boolean showOnlineBooking) {
		this.showOnlineBooking = showOnlineBooking;
	}

	/**
     * 获取date日期的开门和关门时间, 如果当前日期是公众假期，返回公众假期的开关门时间
     *
     * @param date
     * @return
     */
    @Transient
    public OpeningHours getOpeningHour(Date date) {
        OpeningHours openingHours;

        date = (date == null) ? new Date() : date; // 保证有日期
        HolidayService holidayService = SpringUtil.getBean(HolidayServiceImpl.class);
        Holiday holiday = holidayService.getHoliday(date);
        System.out.println("holiday:" + holiday);
        System.out.println("date:" + date);
//        if (holiday != null) {
//            String openTime = PropertiesUtil.getValueByName(Properties.HOLIDAY_OPEN_TIME);
//            String closeTime = PropertiesUtil.getValueByName(Properties.HOLIDAY_CLOSE_TIME);
//            openingHours = new OpeningHours(openTime, closeTime, date);
//            return openingHours;
//        }

        // 使用shop默认设置的快关门时间
        String week = CommonConstant.weekMap.get(new DateTime(date).getDayOfWeek());
        Optional<OpeningHours> optional = openingHourses.stream().filter(e -> week.equals(e.getDayOfWeek())).findFirst();

        if (optional.isPresent()) {
            openingHours = optional.get();

            openingHours = new OpeningHours(openingHours.getOpenTime(), openingHours.getCloseTime(), date,openingHours.isOnlineBooking());
        } else {
            System.out.println("WARNING: using default open time and close time for shop:" + name);
            openingHours = new OpeningHours(CommonConstant.DEFAULT_OPEN_TIME, CommonConstant.DEFAULT_CLOSE_TIME, date,true);
        }
        return openingHours;
    }
    
    @Transient
    public ConsentFormUser getConsentFormUserDetails(Long userId,Long consentFormId){
    	 ConsentFormUserService consentFormUserService = SpringUtil.getBean(ConsentFormUserServiceImpl.class);
    	 List<ConsentFormUser> list=consentFormUserService.getConsentFormSignedByFilter(userId, consentFormId, getId());
    	 if(list !=null && list.size()>0){
    		 return list.get(0);
    	 }
    	 return null;
    }

	@Transient
	public String getPhoneNumber() {
		if (getPhones().isEmpty()) {
			return "";
		}

		return getPhones().iterator().next().getNumber();
	}

	@Transient
	public String getAddress() {
		if (getAddresses().isEmpty()) {
			return "";
		}
		return getAddresses().iterator().next().getAddressExtention();
	}

	/**
	 * 转义之后的地址
	 *
	 * @return
	 */
	@Transient
	public String getAddressEscape() {
		if (getAddresses().isEmpty()) {
			return "";
		}
		String address = getAddresses().iterator().next().getAddressExtention();
		if (StringUtils.isNotBlank(address)) {
			return address.replaceAll("'", "\\\\'");
		}
		return "";
	}
}
