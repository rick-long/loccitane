package org.spa.model.shop;
// Generated 2016-3-31 15:50:45 by Hibernate Tools 4.3.1.Final

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.spa.model.company.Company;

import com.spa.constant.CommonConstant;

/**
 * OpeningHours generated by hbm2java
 */
@Entity
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
@Table(name = "OPENING_HOURS", catalog = "loccitane")
public class OpeningHours implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Long id;
	private Company company;
	private Shop shop;
	private String closeTime;
	private String openTime;
	private String dayOfWeek;
	private boolean isActive;
	private Date created;
	private String createdBy;
	private Date lastUpdated;
	private String lastUpdatedBy;
	private boolean isOnlineBooking;


    // 用于获取当前时间的openTime和closeTime的日期对象
    @Transient
    private Date currentDate;

	public OpeningHours() {
	}

    public OpeningHours(String openTime, String closeTime, Date currentDate,boolean isOnlineBooking) {
        this.openTime = openTime;
        this.closeTime = closeTime;
        this.currentDate = currentDate;
        this.isOnlineBooking=isOnlineBooking;
    }

    public OpeningHours(Company company, Shop shop, boolean isActive) {
		this.company = company;
		this.shop = shop;
		this.isActive = isActive;
	}

	public OpeningHours(Company company, Shop shop, String closeTime, String openTime, String dayOfWeek, boolean isActive,
			Date created, String createdBy, Date lastUpdated, String lastUpdatedBy) {
		this.company = company;
		this.shop = shop;
		this.closeTime = closeTime;
		this.openTime = openTime;
		this.dayOfWeek = dayOfWeek;
		this.isActive = isActive;
		this.created = created;
		this.createdBy = createdBy;
		this.lastUpdated = lastUpdated;
		this.lastUpdatedBy = lastUpdatedBy;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "company_id", nullable = false)
	public Company getCompany() {
		return this.company;
	}

	public void setCompany(Company company) {
		this.company = company;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "shop_id", nullable = false)
	public Shop getShop() {
		return this.shop;
	}

	public void setShop(Shop shop) {
		this.shop = shop;
	}
	
	@Column(name = "close_time", length = 19)
	public String getCloseTime() {
		return this.closeTime;
	}

	public void setCloseTime(String closeTime) {
		this.closeTime = closeTime;
	}
	
	@Column(name = "open_time", length = 19)
	public String getOpenTime() {
		return this.openTime;
	}

	public void setOpenTime(String openTime) {
		this.openTime = openTime;
	}

	@Column(name = "day_of_week", length = 50)
	public String getDayOfWeek() {
		return this.dayOfWeek;
	}

	public void setDayOfWeek(String dayOfWeek) {
		this.dayOfWeek = dayOfWeek;
	}

	@Column(name = "is_active", nullable = false)
	public boolean isIsActive() {
		return this.isActive;
	}

	public void setIsActive(boolean isActive) {
		this.isActive = isActive;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", length = 19)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Column(name = "created_by", length = 100)
	public String getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_updated", length = 19)
	public Date getLastUpdated() {
		return this.lastUpdated;
	}

	public void setLastUpdated(Date lastUpdated) {
		this.lastUpdated = lastUpdated;
	}

	@Column(name = "last_updated_by", length = 100)
	public String getLastUpdatedBy() {
		return this.lastUpdatedBy;
	}

	public void setLastUpdatedBy(String lastUpdatedBy) {
		this.lastUpdatedBy = lastUpdatedBy;
	}
	@Column(name = "is_online_booking", nullable = false)
	public boolean isOnlineBooking() {
		return isOnlineBooking;
	}

	public void setOnlineBooking(boolean onlineBooking) {
		isOnlineBooking = onlineBooking;
	}

    @Transient
    public Date getCurrentDate() {
        return currentDate;
    }

    public void setCurrentDate(Date currentDate) {
        this.currentDate = currentDate;
    }

    /**
     * 获取当前开门的时间对象
     *
     * @return
     */
    @Transient
    public DateTime getOpenTimeObj() {
        DateTimeFormatter dtf = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm");
        String time = getOpenTime();
        if (StringUtils.isBlank(time)) {
            time = CommonConstant.DEFAULT_OPEN_TIME; // 使用默认的时间
        }
        return dtf.parseDateTime(new DateTime(currentDate).toString("yyyy-MM-dd ") + time);
    }

    /**
     * 获取当前关门的时间对象
     *
     * @return
     */
    @Transient
    public DateTime getCloseTimeObj() {
        DateTimeFormatter dtf = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm");
        String time = getCloseTime();
        if (StringUtils.isBlank(time)) {
            time = CommonConstant.DEFAULT_CLOSE_TIME; // 使用默认的时间
        }
        return dtf.parseDateTime(new DateTime(currentDate).toString("yyyy-MM-dd ") + time);
    }

    /**
     * 在shop开门的时间范围内获取startTime
     *
     * @param startTime
     * @return
     */
    public DateTime getClosestStartTime(DateTime startTime) {
        DateTime openTimeObj = getOpenTimeObj();
        return openTimeObj.isBefore(startTime) ? startTime : openTimeObj;
    }

    /**
     * 在shop开门的时间范围内获取endTime
     *
     * @param endTime
     * @return
     */
    public DateTime getClosestEndTime(DateTime endTime) {
        DateTime closeTimeObj = getCloseTimeObj();
        return closeTimeObj.isBefore(endTime) ? closeTimeObj : endTime;
    }
}
