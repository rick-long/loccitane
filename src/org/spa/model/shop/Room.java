package org.spa.model.shop;
// Generated 2016-3-31 15:50:45 by Hibernate Tools 4.3.1.Final

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.spa.model.company.Company;

/**
 * Room generated by hbm2java
 */
@Entity
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
@Table(name = "ROOM", catalog = "loccitane")
public class Room implements java.io.Serializable {

    /**
     *
     */
    private static final long serialVersionUID = 1L;
    private Long id;
    private Company company;
    private Shop shop;
    private String name;
    private String reference;
    private Integer capacity;
    private String remarks;
    private boolean isActive;
    private Date created;
    private String createdBy;
    private Date lastUpdated;
    private String lastUpdatedBy;
    private Integer sort;

    private Set<RoomTreatments> roomTreatmentses = new HashSet<RoomTreatments>(0);

    public Room() {
    }

    public Room(Company company, Shop shop, String reference, boolean isActive) {
        this.company = company;
        this.shop = shop;
        this.reference = reference;
        this.isActive = isActive;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "id", unique = true, nullable = false)
    public Long getId() {
        return this.id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "company_id")
    public Company getCompany() {
        return this.company;
    }

    public void setCompany(Company company) {
        this.company = company;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "shop_id", nullable = false)
    public Shop getShop() {
        return this.shop;
    }

    public void setShop(Shop shop) {
        this.shop = shop;
    }

    @Column(name = "name", length = 100)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Column(name = "reference", nullable = false, length = 50)
    public String getReference() {
        return this.reference;
    }

    public void setReference(String reference) {
        this.reference = reference;
    }

    @Column(name = "capacity")
    public Integer getCapacity() {
        return this.capacity;
    }

    public void setCapacity(Integer capacity) {
        this.capacity = capacity;
    }

    @Column(name = "remarks")
    public String getRemarks() {
        return this.remarks;
    }

    public void setRemarks(String remarks) {
        this.remarks = remarks;
    }

    @Column(name = "is_active", nullable = false)
    public boolean isIsActive() {
        return this.isActive;
    }

    public void setIsActive(boolean isActive) {
        this.isActive = isActive;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "created", length = 19)
    public Date getCreated() {
        return this.created;
    }

    public void setCreated(Date created) {
        this.created = created;
    }

    @Column(name = "created_by", length = 100)
    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "last_updated", length = 19)
    public Date getLastUpdated() {
        return this.lastUpdated;
    }

    public void setLastUpdated(Date lastUpdated) {
        this.lastUpdated = lastUpdated;
    }

    @Column(name = "last_updated_by", length = 100)
    public String getLastUpdatedBy() {
        return this.lastUpdatedBy;
    }

    public void setLastUpdatedBy(String lastUpdatedBy) {
        this.lastUpdatedBy = lastUpdatedBy;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "room", cascade = CascadeType.ALL, orphanRemoval = true)
    public Set<RoomTreatments> getRoomTreatmentses() {
        return this.roomTreatmentses;
    }

    public void setRoomTreatmentses(Set<RoomTreatments> roomTreatmentses) {
        this.roomTreatmentses = roomTreatmentses;
    }

    @Transient
    public List<Long> getAllCategoryIds() {
        return getRoomTreatmentses().stream().filter(e -> e.getCategory() != null).map(e -> e.getCategory().getId()).collect(Collectors.toList());
    }

    @Transient
    public List<Long> getAllTreatmentIds() {
        return getRoomTreatmentses().stream().filter(e -> e.getProduct() != null).map(e -> e.getProduct().getId()).collect(Collectors.toList());
    }

    @Override
    public String toString() {
        return "Room [id=" + id + ", capacity=" + capacity + "]";
    }

    @Transient
    public String getDisplayName() {
        return getName() + " (" + getCapacity() + ")";
    }

    /*@Override
    public String toString() {
        return "Room{" +
                "id=" + id +
                ", shop='" + shop.getName() + '\'' +
                ", name='" + name + '\'' +
                ", capacity=" + capacity +
                ", reference='" + reference + '\'' +
                ", remarks='" + remarks + '\'' +
                ", isActive=" + isActive +
                ", created=" + created +
                ", createdBy='" + createdBy + '\'' +
                ", lastUpdated=" + lastUpdated +
                ", lastUpdatedBy='" + lastUpdatedBy + '\'' +
                '}';
    }*/

    @Column(name = "sort")
    public Integer getSort() {
        return this.sort;
    }

    public void setSort(Integer sort) {
        this.sort = sort;
    }
}
